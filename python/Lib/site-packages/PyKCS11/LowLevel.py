# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LowLevel
else:
    import _LowLevel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cdata(ptr, nelements=1):
    return _LowLevel.cdata(ptr, nelements)

def memmove(data, indata):
    return _LowLevel.memmove(data, indata)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LowLevel.delete_SwigPyIterator

    def value(self):
        return _LowLevel.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LowLevel.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LowLevel.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LowLevel.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LowLevel.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LowLevel.SwigPyIterator_copy(self)

    def next(self):
        return _LowLevel.SwigPyIterator_next(self)

    def __next__(self):
        return _LowLevel.SwigPyIterator___next__(self)

    def previous(self):
        return _LowLevel.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LowLevel.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LowLevel.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LowLevel.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LowLevel.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LowLevel.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LowLevel.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LowLevel.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LowLevel:
_LowLevel.SwigPyIterator_swigregister(SwigPyIterator)
class ckintlist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LowLevel.ckintlist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LowLevel.ckintlist___nonzero__(self)

    def __bool__(self):
        return _LowLevel.ckintlist___bool__(self)

    def __len__(self):
        return _LowLevel.ckintlist___len__(self)

    def __getslice__(self, i, j):
        return _LowLevel.ckintlist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LowLevel.ckintlist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LowLevel.ckintlist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LowLevel.ckintlist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LowLevel.ckintlist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LowLevel.ckintlist___setitem__(self, *args)

    def pop(self):
        return _LowLevel.ckintlist_pop(self)

    def append(self, x):
        return _LowLevel.ckintlist_append(self, x)

    def empty(self):
        return _LowLevel.ckintlist_empty(self)

    def size(self):
        return _LowLevel.ckintlist_size(self)

    def swap(self, v):
        return _LowLevel.ckintlist_swap(self, v)

    def begin(self):
        return _LowLevel.ckintlist_begin(self)

    def end(self):
        return _LowLevel.ckintlist_end(self)

    def rbegin(self):
        return _LowLevel.ckintlist_rbegin(self)

    def rend(self):
        return _LowLevel.ckintlist_rend(self)

    def clear(self):
        return _LowLevel.ckintlist_clear(self)

    def get_allocator(self):
        return _LowLevel.ckintlist_get_allocator(self)

    def pop_back(self):
        return _LowLevel.ckintlist_pop_back(self)

    def erase(self, *args):
        return _LowLevel.ckintlist_erase(self, *args)

    def __init__(self, *args):
        _LowLevel.ckintlist_swiginit(self, _LowLevel.new_ckintlist(*args))

    def push_back(self, x):
        return _LowLevel.ckintlist_push_back(self, x)

    def front(self):
        return _LowLevel.ckintlist_front(self)

    def back(self):
        return _LowLevel.ckintlist_back(self)

    def assign(self, n, x):
        return _LowLevel.ckintlist_assign(self, n, x)

    def resize(self, *args):
        return _LowLevel.ckintlist_resize(self, *args)

    def insert(self, *args):
        return _LowLevel.ckintlist_insert(self, *args)

    def reserve(self, n):
        return _LowLevel.ckintlist_reserve(self, n)

    def capacity(self):
        return _LowLevel.ckintlist_capacity(self)
    __swig_destroy__ = _LowLevel.delete_ckintlist

# Register ckintlist in _LowLevel:
_LowLevel.ckintlist_swigregister(ckintlist)
class ckbytelist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LowLevel.ckbytelist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LowLevel.ckbytelist___nonzero__(self)

    def __bool__(self):
        return _LowLevel.ckbytelist___bool__(self)

    def __len__(self):
        return _LowLevel.ckbytelist___len__(self)

    def __getslice__(self, i, j):
        return _LowLevel.ckbytelist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LowLevel.ckbytelist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LowLevel.ckbytelist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LowLevel.ckbytelist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LowLevel.ckbytelist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LowLevel.ckbytelist___setitem__(self, *args)

    def pop(self):
        return _LowLevel.ckbytelist_pop(self)

    def append(self, x):
        return _LowLevel.ckbytelist_append(self, x)

    def empty(self):
        return _LowLevel.ckbytelist_empty(self)

    def size(self):
        return _LowLevel.ckbytelist_size(self)

    def swap(self, v):
        return _LowLevel.ckbytelist_swap(self, v)

    def begin(self):
        return _LowLevel.ckbytelist_begin(self)

    def end(self):
        return _LowLevel.ckbytelist_end(self)

    def rbegin(self):
        return _LowLevel.ckbytelist_rbegin(self)

    def rend(self):
        return _LowLevel.ckbytelist_rend(self)

    def clear(self):
        return _LowLevel.ckbytelist_clear(self)

    def get_allocator(self):
        return _LowLevel.ckbytelist_get_allocator(self)

    def pop_back(self):
        return _LowLevel.ckbytelist_pop_back(self)

    def erase(self, *args):
        return _LowLevel.ckbytelist_erase(self, *args)

    def __init__(self, *args):
        _LowLevel.ckbytelist_swiginit(self, _LowLevel.new_ckbytelist(*args))

    def push_back(self, x):
        return _LowLevel.ckbytelist_push_back(self, x)

    def front(self):
        return _LowLevel.ckbytelist_front(self)

    def back(self):
        return _LowLevel.ckbytelist_back(self)

    def assign(self, n, x):
        return _LowLevel.ckbytelist_assign(self, n, x)

    def resize(self, *args):
        return _LowLevel.ckbytelist_resize(self, *args)

    def insert(self, *args):
        return _LowLevel.ckbytelist_insert(self, *args)

    def reserve(self, n):
        return _LowLevel.ckbytelist_reserve(self, n)

    def capacity(self):
        return _LowLevel.ckbytelist_capacity(self)
    __swig_destroy__ = _LowLevel.delete_ckbytelist

# Register ckbytelist in _LowLevel:
_LowLevel.ckbytelist_swigregister(ckbytelist)
class ckattrlist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LowLevel.ckattrlist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LowLevel.ckattrlist___nonzero__(self)

    def __bool__(self):
        return _LowLevel.ckattrlist___bool__(self)

    def __len__(self):
        return _LowLevel.ckattrlist___len__(self)

    def __getslice__(self, i, j):
        return _LowLevel.ckattrlist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LowLevel.ckattrlist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LowLevel.ckattrlist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LowLevel.ckattrlist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LowLevel.ckattrlist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LowLevel.ckattrlist___setitem__(self, *args)

    def pop(self):
        return _LowLevel.ckattrlist_pop(self)

    def append(self, x):
        return _LowLevel.ckattrlist_append(self, x)

    def empty(self):
        return _LowLevel.ckattrlist_empty(self)

    def size(self):
        return _LowLevel.ckattrlist_size(self)

    def swap(self, v):
        return _LowLevel.ckattrlist_swap(self, v)

    def begin(self):
        return _LowLevel.ckattrlist_begin(self)

    def end(self):
        return _LowLevel.ckattrlist_end(self)

    def rbegin(self):
        return _LowLevel.ckattrlist_rbegin(self)

    def rend(self):
        return _LowLevel.ckattrlist_rend(self)

    def clear(self):
        return _LowLevel.ckattrlist_clear(self)

    def get_allocator(self):
        return _LowLevel.ckattrlist_get_allocator(self)

    def pop_back(self):
        return _LowLevel.ckattrlist_pop_back(self)

    def erase(self, *args):
        return _LowLevel.ckattrlist_erase(self, *args)

    def __init__(self, *args):
        _LowLevel.ckattrlist_swiginit(self, _LowLevel.new_ckattrlist(*args))

    def push_back(self, x):
        return _LowLevel.ckattrlist_push_back(self, x)

    def front(self):
        return _LowLevel.ckattrlist_front(self)

    def back(self):
        return _LowLevel.ckattrlist_back(self)

    def assign(self, n, x):
        return _LowLevel.ckattrlist_assign(self, n, x)

    def resize(self, *args):
        return _LowLevel.ckattrlist_resize(self, *args)

    def insert(self, *args):
        return _LowLevel.ckattrlist_insert(self, *args)

    def reserve(self, n):
        return _LowLevel.ckattrlist_reserve(self, n)

    def capacity(self):
        return _LowLevel.ckattrlist_capacity(self)
    __swig_destroy__ = _LowLevel.delete_ckattrlist

# Register ckattrlist in _LowLevel:
_LowLevel.ckattrlist_swigregister(ckattrlist)
class ckobjlist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LowLevel.ckobjlist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LowLevel.ckobjlist___nonzero__(self)

    def __bool__(self):
        return _LowLevel.ckobjlist___bool__(self)

    def __len__(self):
        return _LowLevel.ckobjlist___len__(self)

    def __getslice__(self, i, j):
        return _LowLevel.ckobjlist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LowLevel.ckobjlist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LowLevel.ckobjlist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LowLevel.ckobjlist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LowLevel.ckobjlist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LowLevel.ckobjlist___setitem__(self, *args)

    def pop(self):
        return _LowLevel.ckobjlist_pop(self)

    def append(self, x):
        return _LowLevel.ckobjlist_append(self, x)

    def empty(self):
        return _LowLevel.ckobjlist_empty(self)

    def size(self):
        return _LowLevel.ckobjlist_size(self)

    def swap(self, v):
        return _LowLevel.ckobjlist_swap(self, v)

    def begin(self):
        return _LowLevel.ckobjlist_begin(self)

    def end(self):
        return _LowLevel.ckobjlist_end(self)

    def rbegin(self):
        return _LowLevel.ckobjlist_rbegin(self)

    def rend(self):
        return _LowLevel.ckobjlist_rend(self)

    def clear(self):
        return _LowLevel.ckobjlist_clear(self)

    def get_allocator(self):
        return _LowLevel.ckobjlist_get_allocator(self)

    def pop_back(self):
        return _LowLevel.ckobjlist_pop_back(self)

    def erase(self, *args):
        return _LowLevel.ckobjlist_erase(self, *args)

    def __init__(self, *args):
        _LowLevel.ckobjlist_swiginit(self, _LowLevel.new_ckobjlist(*args))

    def push_back(self, x):
        return _LowLevel.ckobjlist_push_back(self, x)

    def front(self):
        return _LowLevel.ckobjlist_front(self)

    def back(self):
        return _LowLevel.ckobjlist_back(self)

    def assign(self, n, x):
        return _LowLevel.ckobjlist_assign(self, n, x)

    def resize(self, *args):
        return _LowLevel.ckobjlist_resize(self, *args)

    def insert(self, *args):
        return _LowLevel.ckobjlist_insert(self, *args)

    def reserve(self, n):
        return _LowLevel.ckobjlist_reserve(self, n)

    def capacity(self):
        return _LowLevel.ckobjlist_capacity(self)
    __swig_destroy__ = _LowLevel.delete_ckobjlist

# Register ckobjlist in _LowLevel:
_LowLevel.ckobjlist_swigregister(ckobjlist)
class CK_SESSION_HANDLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LowLevel.CK_SESSION_HANDLE_swiginit(self, _LowLevel.new_CK_SESSION_HANDLE())
    __swig_destroy__ = _LowLevel.delete_CK_SESSION_HANDLE

    def assign(self, value):
        return _LowLevel.CK_SESSION_HANDLE_assign(self, value)

    def value(self):
        return _LowLevel.CK_SESSION_HANDLE_value(self)

    def cast(self):
        return _LowLevel.CK_SESSION_HANDLE_cast(self)

    @staticmethod
    def frompointer(t):
        return _LowLevel.CK_SESSION_HANDLE_frompointer(t)

# Register CK_SESSION_HANDLE in _LowLevel:
_LowLevel.CK_SESSION_HANDLE_swigregister(CK_SESSION_HANDLE)
class CK_OBJECT_HANDLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LowLevel.CK_OBJECT_HANDLE_swiginit(self, _LowLevel.new_CK_OBJECT_HANDLE())
    __swig_destroy__ = _LowLevel.delete_CK_OBJECT_HANDLE

    def assign(self, value):
        return _LowLevel.CK_OBJECT_HANDLE_assign(self, value)

    def value(self):
        return _LowLevel.CK_OBJECT_HANDLE_value(self)

    def cast(self):
        return _LowLevel.CK_OBJECT_HANDLE_cast(self)

    @staticmethod
    def frompointer(t):
        return _LowLevel.CK_OBJECT_HANDLE_frompointer(t)

# Register CK_OBJECT_HANDLE in _LowLevel:
_LowLevel.CK_OBJECT_HANDLE_swigregister(CK_OBJECT_HANDLE)
class CK_VERSION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_LowLevel.CK_VERSION_major_get)
    minor = property(_LowLevel.CK_VERSION_minor_get)

    def __init__(self):
        _LowLevel.CK_VERSION_swiginit(self, _LowLevel.new_CK_VERSION())
    __swig_destroy__ = _LowLevel.delete_CK_VERSION

# Register CK_VERSION in _LowLevel:
_LowLevel.CK_VERSION_swigregister(CK_VERSION)
class CK_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cryptokiVersion = property(_LowLevel.CK_INFO_cryptokiVersion_get)
    manufacturerID = property(_LowLevel.CK_INFO_manufacturerID_get)
    flags = property(_LowLevel.CK_INFO_flags_get)
    libraryDescription = property(_LowLevel.CK_INFO_libraryDescription_get)
    libraryVersion = property(_LowLevel.CK_INFO_libraryVersion_get)

    def GetManufacturerID(self):
        return _LowLevel.CK_INFO_GetManufacturerID(self)

    def GetLibraryDescription(self):
        return _LowLevel.CK_INFO_GetLibraryDescription(self)

    def GetLibraryVersion(self):
        return _LowLevel.CK_INFO_GetLibraryVersion(self)

    def __init__(self):
        _LowLevel.CK_INFO_swiginit(self, _LowLevel.new_CK_INFO())
    __swig_destroy__ = _LowLevel.delete_CK_INFO

# Register CK_INFO in _LowLevel:
_LowLevel.CK_INFO_swigregister(CK_INFO)
class CK_SLOT_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_LowLevel.CK_SLOT_INFO_flags_get)
    hardwareVersion = property(_LowLevel.CK_SLOT_INFO_hardwareVersion_get)
    firmwareVersion = property(_LowLevel.CK_SLOT_INFO_firmwareVersion_get)

    def GetManufacturerID(self):
        return _LowLevel.CK_SLOT_INFO_GetManufacturerID(self)

    def GetSlotDescription(self):
        return _LowLevel.CK_SLOT_INFO_GetSlotDescription(self)

    def GetHardwareVersion(self):
        return _LowLevel.CK_SLOT_INFO_GetHardwareVersion(self)

    def GetFirmwareVersion(self):
        return _LowLevel.CK_SLOT_INFO_GetFirmwareVersion(self)

    def __init__(self):
        _LowLevel.CK_SLOT_INFO_swiginit(self, _LowLevel.new_CK_SLOT_INFO())
    __swig_destroy__ = _LowLevel.delete_CK_SLOT_INFO

# Register CK_SLOT_INFO in _LowLevel:
_LowLevel.CK_SLOT_INFO_swigregister(CK_SLOT_INFO)
class CK_TOKEN_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_LowLevel.CK_TOKEN_INFO_flags_get)
    ulMaxSessionCount = property(_LowLevel.CK_TOKEN_INFO_ulMaxSessionCount_get)
    ulSessionCount = property(_LowLevel.CK_TOKEN_INFO_ulSessionCount_get)
    ulMaxRwSessionCount = property(_LowLevel.CK_TOKEN_INFO_ulMaxRwSessionCount_get)
    ulRwSessionCount = property(_LowLevel.CK_TOKEN_INFO_ulRwSessionCount_get)
    ulMaxPinLen = property(_LowLevel.CK_TOKEN_INFO_ulMaxPinLen_get)
    ulMinPinLen = property(_LowLevel.CK_TOKEN_INFO_ulMinPinLen_get)
    ulTotalPublicMemory = property(_LowLevel.CK_TOKEN_INFO_ulTotalPublicMemory_get)
    ulFreePublicMemory = property(_LowLevel.CK_TOKEN_INFO_ulFreePublicMemory_get)
    ulTotalPrivateMemory = property(_LowLevel.CK_TOKEN_INFO_ulTotalPrivateMemory_get)
    ulFreePrivateMemory = property(_LowLevel.CK_TOKEN_INFO_ulFreePrivateMemory_get)
    hardwareVersion = property(_LowLevel.CK_TOKEN_INFO_hardwareVersion_get)
    firmwareVersion = property(_LowLevel.CK_TOKEN_INFO_firmwareVersion_get)

    def GetLabel(self):
        return _LowLevel.CK_TOKEN_INFO_GetLabel(self)

    def GetManufacturerID(self):
        return _LowLevel.CK_TOKEN_INFO_GetManufacturerID(self)

    def GetModel(self):
        return _LowLevel.CK_TOKEN_INFO_GetModel(self)

    def GetSerialNumber(self):
        return _LowLevel.CK_TOKEN_INFO_GetSerialNumber(self)

    def GetFirmwareVersion(self):
        return _LowLevel.CK_TOKEN_INFO_GetFirmwareVersion(self)

    def GetUtcTime(self):
        return _LowLevel.CK_TOKEN_INFO_GetUtcTime(self)

    def __init__(self):
        _LowLevel.CK_TOKEN_INFO_swiginit(self, _LowLevel.new_CK_TOKEN_INFO())
    __swig_destroy__ = _LowLevel.delete_CK_TOKEN_INFO

# Register CK_TOKEN_INFO in _LowLevel:
_LowLevel.CK_TOKEN_INFO_swigregister(CK_TOKEN_INFO)
class CK_SESSION_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    slotID = property(_LowLevel.CK_SESSION_INFO_slotID_get)
    state = property(_LowLevel.CK_SESSION_INFO_state_get)
    flags = property(_LowLevel.CK_SESSION_INFO_flags_get)
    ulDeviceError = property(_LowLevel.CK_SESSION_INFO_ulDeviceError_get)

    def __init__(self):
        _LowLevel.CK_SESSION_INFO_swiginit(self, _LowLevel.new_CK_SESSION_INFO())
    __swig_destroy__ = _LowLevel.delete_CK_SESSION_INFO

# Register CK_SESSION_INFO in _LowLevel:
_LowLevel.CK_SESSION_INFO_swigregister(CK_SESSION_INFO)
class CK_DATE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetYear(self):
        return _LowLevel.CK_DATE_GetYear(self)

    def GetMonth(self):
        return _LowLevel.CK_DATE_GetMonth(self)

    def GetDay(self):
        return _LowLevel.CK_DATE_GetDay(self)

    def __init__(self):
        _LowLevel.CK_DATE_swiginit(self, _LowLevel.new_CK_DATE())
    __swig_destroy__ = _LowLevel.delete_CK_DATE

# Register CK_DATE in _LowLevel:
_LowLevel.CK_DATE_swigregister(CK_DATE)
class CK_MECHANISM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mechanism = property(_LowLevel.CK_MECHANISM_mechanism_get, _LowLevel.CK_MECHANISM_mechanism_set)
    pParameter = property(_LowLevel.CK_MECHANISM_pParameter_get, _LowLevel.CK_MECHANISM_pParameter_set)
    ulParameterLen = property(_LowLevel.CK_MECHANISM_ulParameterLen_get, _LowLevel.CK_MECHANISM_ulParameterLen_set)

    def __init__(self):
        _LowLevel.CK_MECHANISM_swiginit(self, _LowLevel.new_CK_MECHANISM())
    __swig_destroy__ = _LowLevel.delete_CK_MECHANISM

# Register CK_MECHANISM in _LowLevel:
_LowLevel.CK_MECHANISM_swigregister(CK_MECHANISM)
class CK_GCM_PARAMS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pIv = property(_LowLevel.CK_GCM_PARAMS_pIv_get, _LowLevel.CK_GCM_PARAMS_pIv_set)
    ulIvLen = property(_LowLevel.CK_GCM_PARAMS_ulIvLen_get, _LowLevel.CK_GCM_PARAMS_ulIvLen_set)
    pAAD = property(_LowLevel.CK_GCM_PARAMS_pAAD_get, _LowLevel.CK_GCM_PARAMS_pAAD_set)
    ulAADLen = property(_LowLevel.CK_GCM_PARAMS_ulAADLen_get, _LowLevel.CK_GCM_PARAMS_ulAADLen_set)
    ulTagBits = property(_LowLevel.CK_GCM_PARAMS_ulTagBits_get, _LowLevel.CK_GCM_PARAMS_ulTagBits_set)

    def __init__(self):
        _LowLevel.CK_GCM_PARAMS_swiginit(self, _LowLevel.new_CK_GCM_PARAMS())
    __swig_destroy__ = _LowLevel.delete_CK_GCM_PARAMS

# Register CK_GCM_PARAMS in _LowLevel:
_LowLevel.CK_GCM_PARAMS_swigregister(CK_GCM_PARAMS)
CK_GCM_PARAMS_LENGTH = _LowLevel.CK_GCM_PARAMS_LENGTH
class CK_RSA_PKCS_OAEP_PARAMS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hashAlg = property(_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_hashAlg_get, _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_hashAlg_set)
    mgf = property(_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_mgf_get, _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_mgf_set)
    src = property(_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_src_get, _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_src_set)
    pSourceData = property(_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_pSourceData_get, _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_pSourceData_set)
    ulSourceDataLen = property(_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_ulSourceDataLen_get, _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_ulSourceDataLen_set)

    def __init__(self):
        _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_swiginit(self, _LowLevel.new_CK_RSA_PKCS_OAEP_PARAMS())
    __swig_destroy__ = _LowLevel.delete_CK_RSA_PKCS_OAEP_PARAMS

# Register CK_RSA_PKCS_OAEP_PARAMS in _LowLevel:
_LowLevel.CK_RSA_PKCS_OAEP_PARAMS_swigregister(CK_RSA_PKCS_OAEP_PARAMS)
CK_RSA_PKCS_OAEP_PARAMS_LENGTH = _LowLevel.CK_RSA_PKCS_OAEP_PARAMS_LENGTH
class CK_RSA_PKCS_PSS_PARAMS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hashAlg = property(_LowLevel.CK_RSA_PKCS_PSS_PARAMS_hashAlg_get, _LowLevel.CK_RSA_PKCS_PSS_PARAMS_hashAlg_set)
    mgf = property(_LowLevel.CK_RSA_PKCS_PSS_PARAMS_mgf_get, _LowLevel.CK_RSA_PKCS_PSS_PARAMS_mgf_set)
    sLen = property(_LowLevel.CK_RSA_PKCS_PSS_PARAMS_sLen_get, _LowLevel.CK_RSA_PKCS_PSS_PARAMS_sLen_set)

    def __init__(self):
        _LowLevel.CK_RSA_PKCS_PSS_PARAMS_swiginit(self, _LowLevel.new_CK_RSA_PKCS_PSS_PARAMS())
    __swig_destroy__ = _LowLevel.delete_CK_RSA_PKCS_PSS_PARAMS

# Register CK_RSA_PKCS_PSS_PARAMS in _LowLevel:
_LowLevel.CK_RSA_PKCS_PSS_PARAMS_swigregister(CK_RSA_PKCS_PSS_PARAMS)
CK_RSA_PKCS_PSS_PARAMS_LENGTH = _LowLevel.CK_RSA_PKCS_PSS_PARAMS_LENGTH
class CK_ECDH1_DERIVE_PARAMS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kdf = property(_LowLevel.CK_ECDH1_DERIVE_PARAMS_kdf_get, _LowLevel.CK_ECDH1_DERIVE_PARAMS_kdf_set)
    ulSharedDataLen = property(_LowLevel.CK_ECDH1_DERIVE_PARAMS_ulSharedDataLen_get, _LowLevel.CK_ECDH1_DERIVE_PARAMS_ulSharedDataLen_set)
    pSharedData = property(_LowLevel.CK_ECDH1_DERIVE_PARAMS_pSharedData_get, _LowLevel.CK_ECDH1_DERIVE_PARAMS_pSharedData_set)
    ulPublicDataLen = property(_LowLevel.CK_ECDH1_DERIVE_PARAMS_ulPublicDataLen_get, _LowLevel.CK_ECDH1_DERIVE_PARAMS_ulPublicDataLen_set)
    pPublicData = property(_LowLevel.CK_ECDH1_DERIVE_PARAMS_pPublicData_get, _LowLevel.CK_ECDH1_DERIVE_PARAMS_pPublicData_set)

    def __init__(self):
        _LowLevel.CK_ECDH1_DERIVE_PARAMS_swiginit(self, _LowLevel.new_CK_ECDH1_DERIVE_PARAMS())
    __swig_destroy__ = _LowLevel.delete_CK_ECDH1_DERIVE_PARAMS

# Register CK_ECDH1_DERIVE_PARAMS in _LowLevel:
_LowLevel.CK_ECDH1_DERIVE_PARAMS_swigregister(CK_ECDH1_DERIVE_PARAMS)
CK_ECDH1_DERIVE_PARAMS_LENGTH = _LowLevel.CK_ECDH1_DERIVE_PARAMS_LENGTH
class CK_MECHANISM_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ulMinKeySize = property(_LowLevel.CK_MECHANISM_INFO_ulMinKeySize_get)
    ulMaxKeySize = property(_LowLevel.CK_MECHANISM_INFO_ulMaxKeySize_get)
    flags = property(_LowLevel.CK_MECHANISM_INFO_flags_get)

    def __init__(self):
        _LowLevel.CK_MECHANISM_INFO_swiginit(self, _LowLevel.new_CK_MECHANISM_INFO())
    __swig_destroy__ = _LowLevel.delete_CK_MECHANISM_INFO

# Register CK_MECHANISM_INFO in _LowLevel:
_LowLevel.CK_MECHANISM_INFO_swigregister(CK_MECHANISM_INFO)
FALSE = _LowLevel.FALSE
TRUE = _LowLevel.TRUE
CK_TRUE = _LowLevel.CK_TRUE
CK_FALSE = _LowLevel.CK_FALSE
CK_UNAVAILABLE_INFORMATION = _LowLevel.CK_UNAVAILABLE_INFORMATION
CK_EFFECTIVELY_INFINITE = _LowLevel.CK_EFFECTIVELY_INFINITE
CK_INVALID_HANDLE = _LowLevel.CK_INVALID_HANDLE
CKN_SURRENDER = _LowLevel.CKN_SURRENDER
CKN_OTP_CHANGED = _LowLevel.CKN_OTP_CHANGED
CKF_TOKEN_PRESENT = _LowLevel.CKF_TOKEN_PRESENT
CKF_REMOVABLE_DEVICE = _LowLevel.CKF_REMOVABLE_DEVICE
CKF_HW_SLOT = _LowLevel.CKF_HW_SLOT
CKF_RNG = _LowLevel.CKF_RNG
CKF_WRITE_PROTECTED = _LowLevel.CKF_WRITE_PROTECTED
CKF_LOGIN_REQUIRED = _LowLevel.CKF_LOGIN_REQUIRED
CKF_USER_PIN_INITIALIZED = _LowLevel.CKF_USER_PIN_INITIALIZED
CKF_RESTORE_KEY_NOT_NEEDED = _LowLevel.CKF_RESTORE_KEY_NOT_NEEDED
CKF_CLOCK_ON_TOKEN = _LowLevel.CKF_CLOCK_ON_TOKEN
CKF_PROTECTED_AUTHENTICATION_PATH = _LowLevel.CKF_PROTECTED_AUTHENTICATION_PATH
CKF_DUAL_CRYPTO_OPERATIONS = _LowLevel.CKF_DUAL_CRYPTO_OPERATIONS
CKF_TOKEN_INITIALIZED = _LowLevel.CKF_TOKEN_INITIALIZED
CKF_SECONDARY_AUTHENTICATION = _LowLevel.CKF_SECONDARY_AUTHENTICATION
CKF_USER_PIN_COUNT_LOW = _LowLevel.CKF_USER_PIN_COUNT_LOW
CKF_USER_PIN_FINAL_TRY = _LowLevel.CKF_USER_PIN_FINAL_TRY
CKF_USER_PIN_LOCKED = _LowLevel.CKF_USER_PIN_LOCKED
CKF_USER_PIN_TO_BE_CHANGED = _LowLevel.CKF_USER_PIN_TO_BE_CHANGED
CKF_SO_PIN_COUNT_LOW = _LowLevel.CKF_SO_PIN_COUNT_LOW
CKF_SO_PIN_FINAL_TRY = _LowLevel.CKF_SO_PIN_FINAL_TRY
CKF_SO_PIN_LOCKED = _LowLevel.CKF_SO_PIN_LOCKED
CKF_SO_PIN_TO_BE_CHANGED = _LowLevel.CKF_SO_PIN_TO_BE_CHANGED
CKF_ERROR_STATE = _LowLevel.CKF_ERROR_STATE
CKF_ARRAY_ATTRIBUTE = _LowLevel.CKF_ARRAY_ATTRIBUTE
CKU_SO = _LowLevel.CKU_SO
CKU_USER = _LowLevel.CKU_USER
CKU_CONTEXT_SPECIFIC = _LowLevel.CKU_CONTEXT_SPECIFIC
CKS_RO_PUBLIC_SESSION = _LowLevel.CKS_RO_PUBLIC_SESSION
CKS_RO_USER_FUNCTIONS = _LowLevel.CKS_RO_USER_FUNCTIONS
CKS_RW_PUBLIC_SESSION = _LowLevel.CKS_RW_PUBLIC_SESSION
CKS_RW_USER_FUNCTIONS = _LowLevel.CKS_RW_USER_FUNCTIONS
CKS_RW_SO_FUNCTIONS = _LowLevel.CKS_RW_SO_FUNCTIONS
CKF_RW_SESSION = _LowLevel.CKF_RW_SESSION
CKF_SERIAL_SESSION = _LowLevel.CKF_SERIAL_SESSION
CKO_DATA = _LowLevel.CKO_DATA
CKO_CERTIFICATE = _LowLevel.CKO_CERTIFICATE
CKO_PUBLIC_KEY = _LowLevel.CKO_PUBLIC_KEY
CKO_PRIVATE_KEY = _LowLevel.CKO_PRIVATE_KEY
CKO_SECRET_KEY = _LowLevel.CKO_SECRET_KEY
CKO_HW_FEATURE = _LowLevel.CKO_HW_FEATURE
CKO_DOMAIN_PARAMETERS = _LowLevel.CKO_DOMAIN_PARAMETERS
CKO_MECHANISM = _LowLevel.CKO_MECHANISM
CKO_OTP_KEY = _LowLevel.CKO_OTP_KEY
CKO_PROFILE = _LowLevel.CKO_PROFILE
CKO_VENDOR_DEFINED = _LowLevel.CKO_VENDOR_DEFINED
CKH_MONOTONIC_COUNTER = _LowLevel.CKH_MONOTONIC_COUNTER
CKH_CLOCK = _LowLevel.CKH_CLOCK
CKH_USER_INTERFACE = _LowLevel.CKH_USER_INTERFACE
CKH_VENDOR_DEFINED = _LowLevel.CKH_VENDOR_DEFINED
CKK_RSA = _LowLevel.CKK_RSA
CKK_DSA = _LowLevel.CKK_DSA
CKK_DH = _LowLevel.CKK_DH
CKK_ECDSA = _LowLevel.CKK_ECDSA
CKK_EC = _LowLevel.CKK_EC
CKK_X9_42_DH = _LowLevel.CKK_X9_42_DH
CKK_KEA = _LowLevel.CKK_KEA
CKK_GENERIC_SECRET = _LowLevel.CKK_GENERIC_SECRET
CKK_RC2 = _LowLevel.CKK_RC2
CKK_RC4 = _LowLevel.CKK_RC4
CKK_DES = _LowLevel.CKK_DES
CKK_DES2 = _LowLevel.CKK_DES2
CKK_DES3 = _LowLevel.CKK_DES3
CKK_CAST = _LowLevel.CKK_CAST
CKK_CAST3 = _LowLevel.CKK_CAST3
CKK_CAST5 = _LowLevel.CKK_CAST5
CKK_CAST128 = _LowLevel.CKK_CAST128
CKK_RC5 = _LowLevel.CKK_RC5
CKK_IDEA = _LowLevel.CKK_IDEA
CKK_SKIPJACK = _LowLevel.CKK_SKIPJACK
CKK_BATON = _LowLevel.CKK_BATON
CKK_JUNIPER = _LowLevel.CKK_JUNIPER
CKK_CDMF = _LowLevel.CKK_CDMF
CKK_AES = _LowLevel.CKK_AES
CKK_BLOWFISH = _LowLevel.CKK_BLOWFISH
CKK_TWOFISH = _LowLevel.CKK_TWOFISH
CKK_SECURID = _LowLevel.CKK_SECURID
CKK_HOTP = _LowLevel.CKK_HOTP
CKK_ACTI = _LowLevel.CKK_ACTI
CKK_CAMELLIA = _LowLevel.CKK_CAMELLIA
CKK_ARIA = _LowLevel.CKK_ARIA
CKK_MD5_HMAC = _LowLevel.CKK_MD5_HMAC
CKK_SHA_1_HMAC = _LowLevel.CKK_SHA_1_HMAC
CKK_RIPEMD128_HMAC = _LowLevel.CKK_RIPEMD128_HMAC
CKK_RIPEMD160_HMAC = _LowLevel.CKK_RIPEMD160_HMAC
CKK_SHA256_HMAC = _LowLevel.CKK_SHA256_HMAC
CKK_SHA384_HMAC = _LowLevel.CKK_SHA384_HMAC
CKK_SHA512_HMAC = _LowLevel.CKK_SHA512_HMAC
CKK_SHA224_HMAC = _LowLevel.CKK_SHA224_HMAC
CKK_GOSTR3410 = _LowLevel.CKK_GOSTR3410
CKK_GOSTR3411 = _LowLevel.CKK_GOSTR3411
CKK_GOST28147 = _LowLevel.CKK_GOST28147
CKK_CHACHA20 = _LowLevel.CKK_CHACHA20
CKK_POLY1305 = _LowLevel.CKK_POLY1305
CKK_AES_XTS = _LowLevel.CKK_AES_XTS
CKK_SHA3_224_HMAC = _LowLevel.CKK_SHA3_224_HMAC
CKK_SHA3_256_HMAC = _LowLevel.CKK_SHA3_256_HMAC
CKK_SHA3_384_HMAC = _LowLevel.CKK_SHA3_384_HMAC
CKK_SHA3_512_HMAC = _LowLevel.CKK_SHA3_512_HMAC
CKK_BLAKE2B_160_HMAC = _LowLevel.CKK_BLAKE2B_160_HMAC
CKK_BLAKE2B_256_HMAC = _LowLevel.CKK_BLAKE2B_256_HMAC
CKK_BLAKE2B_384_HMAC = _LowLevel.CKK_BLAKE2B_384_HMAC
CKK_BLAKE2B_512_HMAC = _LowLevel.CKK_BLAKE2B_512_HMAC
CKK_SALSA20 = _LowLevel.CKK_SALSA20
CKK_X2RATCHET = _LowLevel.CKK_X2RATCHET
CKK_EC_EDWARDS = _LowLevel.CKK_EC_EDWARDS
CKK_EC_MONTGOMERY = _LowLevel.CKK_EC_MONTGOMERY
CKK_HKDF = _LowLevel.CKK_HKDF
CKK_VENDOR_DEFINED = _LowLevel.CKK_VENDOR_DEFINED
CKC_X_509 = _LowLevel.CKC_X_509
CKC_X_509_ATTR_CERT = _LowLevel.CKC_X_509_ATTR_CERT
CKC_WTLS = _LowLevel.CKC_WTLS
CKC_VENDOR_DEFINED = _LowLevel.CKC_VENDOR_DEFINED
CKA_CLASS = _LowLevel.CKA_CLASS
CKA_TOKEN = _LowLevel.CKA_TOKEN
CKA_PRIVATE = _LowLevel.CKA_PRIVATE
CKA_LABEL = _LowLevel.CKA_LABEL
CKA_UNIQUE_ID = _LowLevel.CKA_UNIQUE_ID
CKA_APPLICATION = _LowLevel.CKA_APPLICATION
CKA_VALUE = _LowLevel.CKA_VALUE
CKA_OBJECT_ID = _LowLevel.CKA_OBJECT_ID
CKA_CERTIFICATE_TYPE = _LowLevel.CKA_CERTIFICATE_TYPE
CKA_ISSUER = _LowLevel.CKA_ISSUER
CKA_SERIAL_NUMBER = _LowLevel.CKA_SERIAL_NUMBER
CKA_AC_ISSUER = _LowLevel.CKA_AC_ISSUER
CKA_OWNER = _LowLevel.CKA_OWNER
CKA_ATTR_TYPES = _LowLevel.CKA_ATTR_TYPES
CKA_TRUSTED = _LowLevel.CKA_TRUSTED
CKA_CERTIFICATE_CATEGORY = _LowLevel.CKA_CERTIFICATE_CATEGORY
CKA_JAVA_MIDP_SECURITY_DOMAIN = _LowLevel.CKA_JAVA_MIDP_SECURITY_DOMAIN
CKA_URL = _LowLevel.CKA_URL
CKA_HASH_OF_SUBJECT_PUBLIC_KEY = _LowLevel.CKA_HASH_OF_SUBJECT_PUBLIC_KEY
CKA_HASH_OF_ISSUER_PUBLIC_KEY = _LowLevel.CKA_HASH_OF_ISSUER_PUBLIC_KEY
CKA_NAME_HASH_ALGORITHM = _LowLevel.CKA_NAME_HASH_ALGORITHM
CKA_CHECK_VALUE = _LowLevel.CKA_CHECK_VALUE
CKA_KEY_TYPE = _LowLevel.CKA_KEY_TYPE
CKA_SUBJECT = _LowLevel.CKA_SUBJECT
CKA_ID = _LowLevel.CKA_ID
CKA_SENSITIVE = _LowLevel.CKA_SENSITIVE
CKA_ENCRYPT = _LowLevel.CKA_ENCRYPT
CKA_DECRYPT = _LowLevel.CKA_DECRYPT
CKA_WRAP = _LowLevel.CKA_WRAP
CKA_UNWRAP = _LowLevel.CKA_UNWRAP
CKA_SIGN = _LowLevel.CKA_SIGN
CKA_SIGN_RECOVER = _LowLevel.CKA_SIGN_RECOVER
CKA_VERIFY = _LowLevel.CKA_VERIFY
CKA_VERIFY_RECOVER = _LowLevel.CKA_VERIFY_RECOVER
CKA_DERIVE = _LowLevel.CKA_DERIVE
CKA_START_DATE = _LowLevel.CKA_START_DATE
CKA_END_DATE = _LowLevel.CKA_END_DATE
CKA_MODULUS = _LowLevel.CKA_MODULUS
CKA_MODULUS_BITS = _LowLevel.CKA_MODULUS_BITS
CKA_PUBLIC_EXPONENT = _LowLevel.CKA_PUBLIC_EXPONENT
CKA_PRIVATE_EXPONENT = _LowLevel.CKA_PRIVATE_EXPONENT
CKA_PRIME_1 = _LowLevel.CKA_PRIME_1
CKA_PRIME_2 = _LowLevel.CKA_PRIME_2
CKA_EXPONENT_1 = _LowLevel.CKA_EXPONENT_1
CKA_EXPONENT_2 = _LowLevel.CKA_EXPONENT_2
CKA_COEFFICIENT = _LowLevel.CKA_COEFFICIENT
CKA_PUBLIC_KEY_INFO = _LowLevel.CKA_PUBLIC_KEY_INFO
CKA_PRIME = _LowLevel.CKA_PRIME
CKA_SUBPRIME = _LowLevel.CKA_SUBPRIME
CKA_BASE = _LowLevel.CKA_BASE
CKA_PRIME_BITS = _LowLevel.CKA_PRIME_BITS
CKA_SUBPRIME_BITS = _LowLevel.CKA_SUBPRIME_BITS
CKA_SUB_PRIME_BITS = _LowLevel.CKA_SUB_PRIME_BITS
CKA_VALUE_BITS = _LowLevel.CKA_VALUE_BITS
CKA_VALUE_LEN = _LowLevel.CKA_VALUE_LEN
CKA_EXTRACTABLE = _LowLevel.CKA_EXTRACTABLE
CKA_LOCAL = _LowLevel.CKA_LOCAL
CKA_NEVER_EXTRACTABLE = _LowLevel.CKA_NEVER_EXTRACTABLE
CKA_ALWAYS_SENSITIVE = _LowLevel.CKA_ALWAYS_SENSITIVE
CKA_KEY_GEN_MECHANISM = _LowLevel.CKA_KEY_GEN_MECHANISM
CKA_MODIFIABLE = _LowLevel.CKA_MODIFIABLE
CKA_COPYABLE = _LowLevel.CKA_COPYABLE
CKA_DESTROYABLE = _LowLevel.CKA_DESTROYABLE
CKA_ECDSA_PARAMS = _LowLevel.CKA_ECDSA_PARAMS
CKA_EC_PARAMS = _LowLevel.CKA_EC_PARAMS
CKA_EC_POINT = _LowLevel.CKA_EC_POINT
CKA_SECONDARY_AUTH = _LowLevel.CKA_SECONDARY_AUTH
CKA_AUTH_PIN_FLAGS = _LowLevel.CKA_AUTH_PIN_FLAGS
CKA_ALWAYS_AUTHENTICATE = _LowLevel.CKA_ALWAYS_AUTHENTICATE
CKA_WRAP_WITH_TRUSTED = _LowLevel.CKA_WRAP_WITH_TRUSTED
CKA_WRAP_TEMPLATE = _LowLevel.CKA_WRAP_TEMPLATE
CKA_UNWRAP_TEMPLATE = _LowLevel.CKA_UNWRAP_TEMPLATE
CKA_DERIVE_TEMPLATE = _LowLevel.CKA_DERIVE_TEMPLATE
CKA_OTP_FORMAT = _LowLevel.CKA_OTP_FORMAT
CKA_OTP_LENGTH = _LowLevel.CKA_OTP_LENGTH
CKA_OTP_TIME_INTERVAL = _LowLevel.CKA_OTP_TIME_INTERVAL
CKA_OTP_USER_FRIENDLY_MODE = _LowLevel.CKA_OTP_USER_FRIENDLY_MODE
CKA_OTP_CHALLENGE_REQUIREMENT = _LowLevel.CKA_OTP_CHALLENGE_REQUIREMENT
CKA_OTP_TIME_REQUIREMENT = _LowLevel.CKA_OTP_TIME_REQUIREMENT
CKA_OTP_COUNTER_REQUIREMENT = _LowLevel.CKA_OTP_COUNTER_REQUIREMENT
CKA_OTP_PIN_REQUIREMENT = _LowLevel.CKA_OTP_PIN_REQUIREMENT
CKA_OTP_COUNTER = _LowLevel.CKA_OTP_COUNTER
CKA_OTP_TIME = _LowLevel.CKA_OTP_TIME
CKA_OTP_USER_IDENTIFIER = _LowLevel.CKA_OTP_USER_IDENTIFIER
CKA_OTP_SERVICE_IDENTIFIER = _LowLevel.CKA_OTP_SERVICE_IDENTIFIER
CKA_OTP_SERVICE_LOGO = _LowLevel.CKA_OTP_SERVICE_LOGO
CKA_OTP_SERVICE_LOGO_TYPE = _LowLevel.CKA_OTP_SERVICE_LOGO_TYPE
CKA_GOSTR3410_PARAMS = _LowLevel.CKA_GOSTR3410_PARAMS
CKA_GOSTR3411_PARAMS = _LowLevel.CKA_GOSTR3411_PARAMS
CKA_GOST28147_PARAMS = _LowLevel.CKA_GOST28147_PARAMS
CKA_HW_FEATURE_TYPE = _LowLevel.CKA_HW_FEATURE_TYPE
CKA_RESET_ON_INIT = _LowLevel.CKA_RESET_ON_INIT
CKA_HAS_RESET = _LowLevel.CKA_HAS_RESET
CKA_PIXEL_X = _LowLevel.CKA_PIXEL_X
CKA_PIXEL_Y = _LowLevel.CKA_PIXEL_Y
CKA_RESOLUTION = _LowLevel.CKA_RESOLUTION
CKA_CHAR_ROWS = _LowLevel.CKA_CHAR_ROWS
CKA_CHAR_COLUMNS = _LowLevel.CKA_CHAR_COLUMNS
CKA_COLOR = _LowLevel.CKA_COLOR
CKA_BITS_PER_PIXEL = _LowLevel.CKA_BITS_PER_PIXEL
CKA_CHAR_SETS = _LowLevel.CKA_CHAR_SETS
CKA_ENCODING_METHODS = _LowLevel.CKA_ENCODING_METHODS
CKA_MIME_TYPES = _LowLevel.CKA_MIME_TYPES
CKA_MECHANISM_TYPE = _LowLevel.CKA_MECHANISM_TYPE
CKA_REQUIRED_CMS_ATTRIBUTES = _LowLevel.CKA_REQUIRED_CMS_ATTRIBUTES
CKA_DEFAULT_CMS_ATTRIBUTES = _LowLevel.CKA_DEFAULT_CMS_ATTRIBUTES
CKA_SUPPORTED_CMS_ATTRIBUTES = _LowLevel.CKA_SUPPORTED_CMS_ATTRIBUTES
CKA_ALLOWED_MECHANISMS = _LowLevel.CKA_ALLOWED_MECHANISMS
CKA_PROFILE_ID = _LowLevel.CKA_PROFILE_ID
CKA_VENDOR_DEFINED = _LowLevel.CKA_VENDOR_DEFINED
CKM_RSA_PKCS_KEY_PAIR_GEN = _LowLevel.CKM_RSA_PKCS_KEY_PAIR_GEN
CKM_RSA_PKCS = _LowLevel.CKM_RSA_PKCS
CKM_RSA_9796 = _LowLevel.CKM_RSA_9796
CKM_RSA_X_509 = _LowLevel.CKM_RSA_X_509
CKM_MD2_RSA_PKCS = _LowLevel.CKM_MD2_RSA_PKCS
CKM_MD5_RSA_PKCS = _LowLevel.CKM_MD5_RSA_PKCS
CKM_SHA1_RSA_PKCS = _LowLevel.CKM_SHA1_RSA_PKCS
CKM_RIPEMD128_RSA_PKCS = _LowLevel.CKM_RIPEMD128_RSA_PKCS
CKM_RIPEMD160_RSA_PKCS = _LowLevel.CKM_RIPEMD160_RSA_PKCS
CKM_RSA_PKCS_OAEP = _LowLevel.CKM_RSA_PKCS_OAEP
CKM_RSA_X9_31_KEY_PAIR_GEN = _LowLevel.CKM_RSA_X9_31_KEY_PAIR_GEN
CKM_RSA_X9_31 = _LowLevel.CKM_RSA_X9_31
CKM_SHA1_RSA_X9_31 = _LowLevel.CKM_SHA1_RSA_X9_31
CKM_RSA_PKCS_PSS = _LowLevel.CKM_RSA_PKCS_PSS
CKM_SHA1_RSA_PKCS_PSS = _LowLevel.CKM_SHA1_RSA_PKCS_PSS
CKM_DSA_KEY_PAIR_GEN = _LowLevel.CKM_DSA_KEY_PAIR_GEN
CKM_DSA = _LowLevel.CKM_DSA
CKM_DSA_SHA1 = _LowLevel.CKM_DSA_SHA1
CKM_DSA_SHA224 = _LowLevel.CKM_DSA_SHA224
CKM_DSA_SHA256 = _LowLevel.CKM_DSA_SHA256
CKM_DSA_SHA384 = _LowLevel.CKM_DSA_SHA384
CKM_DSA_SHA512 = _LowLevel.CKM_DSA_SHA512
CKM_DSA_SHA3_224 = _LowLevel.CKM_DSA_SHA3_224
CKM_DSA_SHA3_256 = _LowLevel.CKM_DSA_SHA3_256
CKM_DSA_SHA3_384 = _LowLevel.CKM_DSA_SHA3_384
CKM_DSA_SHA3_512 = _LowLevel.CKM_DSA_SHA3_512
CKM_DH_PKCS_KEY_PAIR_GEN = _LowLevel.CKM_DH_PKCS_KEY_PAIR_GEN
CKM_DH_PKCS_DERIVE = _LowLevel.CKM_DH_PKCS_DERIVE
CKM_X9_42_DH_KEY_PAIR_GEN = _LowLevel.CKM_X9_42_DH_KEY_PAIR_GEN
CKM_X9_42_DH_DERIVE = _LowLevel.CKM_X9_42_DH_DERIVE
CKM_X9_42_DH_HYBRID_DERIVE = _LowLevel.CKM_X9_42_DH_HYBRID_DERIVE
CKM_X9_42_MQV_DERIVE = _LowLevel.CKM_X9_42_MQV_DERIVE
CKM_SHA256_RSA_PKCS = _LowLevel.CKM_SHA256_RSA_PKCS
CKM_SHA384_RSA_PKCS = _LowLevel.CKM_SHA384_RSA_PKCS
CKM_SHA512_RSA_PKCS = _LowLevel.CKM_SHA512_RSA_PKCS
CKM_SHA256_RSA_PKCS_PSS = _LowLevel.CKM_SHA256_RSA_PKCS_PSS
CKM_SHA384_RSA_PKCS_PSS = _LowLevel.CKM_SHA384_RSA_PKCS_PSS
CKM_SHA512_RSA_PKCS_PSS = _LowLevel.CKM_SHA512_RSA_PKCS_PSS
CKM_SHA224_RSA_PKCS = _LowLevel.CKM_SHA224_RSA_PKCS
CKM_SHA224_RSA_PKCS_PSS = _LowLevel.CKM_SHA224_RSA_PKCS_PSS
CKM_SHA512_224 = _LowLevel.CKM_SHA512_224
CKM_SHA512_224_HMAC = _LowLevel.CKM_SHA512_224_HMAC
CKM_SHA512_224_HMAC_GENERAL = _LowLevel.CKM_SHA512_224_HMAC_GENERAL
CKM_SHA512_224_KEY_DERIVATION = _LowLevel.CKM_SHA512_224_KEY_DERIVATION
CKM_SHA512_256 = _LowLevel.CKM_SHA512_256
CKM_SHA512_256_HMAC = _LowLevel.CKM_SHA512_256_HMAC
CKM_SHA512_256_HMAC_GENERAL = _LowLevel.CKM_SHA512_256_HMAC_GENERAL
CKM_SHA512_256_KEY_DERIVATION = _LowLevel.CKM_SHA512_256_KEY_DERIVATION
CKM_SHA512_T = _LowLevel.CKM_SHA512_T
CKM_SHA512_T_HMAC = _LowLevel.CKM_SHA512_T_HMAC
CKM_SHA512_T_HMAC_GENERAL = _LowLevel.CKM_SHA512_T_HMAC_GENERAL
CKM_SHA512_T_KEY_DERIVATION = _LowLevel.CKM_SHA512_T_KEY_DERIVATION
CKM_SHA3_256_RSA_PKCS = _LowLevel.CKM_SHA3_256_RSA_PKCS
CKM_SHA3_384_RSA_PKCS = _LowLevel.CKM_SHA3_384_RSA_PKCS
CKM_SHA3_512_RSA_PKCS = _LowLevel.CKM_SHA3_512_RSA_PKCS
CKM_SHA3_256_RSA_PKCS_PSS = _LowLevel.CKM_SHA3_256_RSA_PKCS_PSS
CKM_SHA3_384_RSA_PKCS_PSS = _LowLevel.CKM_SHA3_384_RSA_PKCS_PSS
CKM_SHA3_512_RSA_PKCS_PSS = _LowLevel.CKM_SHA3_512_RSA_PKCS_PSS
CKM_SHA3_224_RSA_PKCS = _LowLevel.CKM_SHA3_224_RSA_PKCS
CKM_SHA3_224_RSA_PKCS_PSS = _LowLevel.CKM_SHA3_224_RSA_PKCS_PSS
CKM_RC2_KEY_GEN = _LowLevel.CKM_RC2_KEY_GEN
CKM_RC2_ECB = _LowLevel.CKM_RC2_ECB
CKM_RC2_CBC = _LowLevel.CKM_RC2_CBC
CKM_RC2_MAC = _LowLevel.CKM_RC2_MAC
CKM_RC2_MAC_GENERAL = _LowLevel.CKM_RC2_MAC_GENERAL
CKM_RC2_CBC_PAD = _LowLevel.CKM_RC2_CBC_PAD
CKM_RC4_KEY_GEN = _LowLevel.CKM_RC4_KEY_GEN
CKM_RC4 = _LowLevel.CKM_RC4
CKM_DES_KEY_GEN = _LowLevel.CKM_DES_KEY_GEN
CKM_DES_ECB = _LowLevel.CKM_DES_ECB
CKM_DES_CBC = _LowLevel.CKM_DES_CBC
CKM_DES_MAC = _LowLevel.CKM_DES_MAC
CKM_DES_MAC_GENERAL = _LowLevel.CKM_DES_MAC_GENERAL
CKM_DES_CBC_PAD = _LowLevel.CKM_DES_CBC_PAD
CKM_DES2_KEY_GEN = _LowLevel.CKM_DES2_KEY_GEN
CKM_DES3_KEY_GEN = _LowLevel.CKM_DES3_KEY_GEN
CKM_DES3_ECB = _LowLevel.CKM_DES3_ECB
CKM_DES3_CBC = _LowLevel.CKM_DES3_CBC
CKM_DES3_MAC = _LowLevel.CKM_DES3_MAC
CKM_DES3_MAC_GENERAL = _LowLevel.CKM_DES3_MAC_GENERAL
CKM_DES3_CBC_PAD = _LowLevel.CKM_DES3_CBC_PAD
CKM_DES3_CMAC_GENERAL = _LowLevel.CKM_DES3_CMAC_GENERAL
CKM_DES3_CMAC = _LowLevel.CKM_DES3_CMAC
CKM_CDMF_KEY_GEN = _LowLevel.CKM_CDMF_KEY_GEN
CKM_CDMF_ECB = _LowLevel.CKM_CDMF_ECB
CKM_CDMF_CBC = _LowLevel.CKM_CDMF_CBC
CKM_CDMF_MAC = _LowLevel.CKM_CDMF_MAC
CKM_CDMF_MAC_GENERAL = _LowLevel.CKM_CDMF_MAC_GENERAL
CKM_CDMF_CBC_PAD = _LowLevel.CKM_CDMF_CBC_PAD
CKM_DES_OFB64 = _LowLevel.CKM_DES_OFB64
CKM_DES_OFB8 = _LowLevel.CKM_DES_OFB8
CKM_DES_CFB64 = _LowLevel.CKM_DES_CFB64
CKM_DES_CFB8 = _LowLevel.CKM_DES_CFB8
CKM_MD2 = _LowLevel.CKM_MD2
CKM_MD2_HMAC = _LowLevel.CKM_MD2_HMAC
CKM_MD2_HMAC_GENERAL = _LowLevel.CKM_MD2_HMAC_GENERAL
CKM_MD5 = _LowLevel.CKM_MD5
CKM_MD5_HMAC = _LowLevel.CKM_MD5_HMAC
CKM_MD5_HMAC_GENERAL = _LowLevel.CKM_MD5_HMAC_GENERAL
CKM_SHA_1 = _LowLevel.CKM_SHA_1
CKM_SHA_1_HMAC = _LowLevel.CKM_SHA_1_HMAC
CKM_SHA_1_HMAC_GENERAL = _LowLevel.CKM_SHA_1_HMAC_GENERAL
CKM_RIPEMD128 = _LowLevel.CKM_RIPEMD128
CKM_RIPEMD128_HMAC = _LowLevel.CKM_RIPEMD128_HMAC
CKM_RIPEMD128_HMAC_GENERAL = _LowLevel.CKM_RIPEMD128_HMAC_GENERAL
CKM_RIPEMD160 = _LowLevel.CKM_RIPEMD160
CKM_RIPEMD160_HMAC = _LowLevel.CKM_RIPEMD160_HMAC
CKM_RIPEMD160_HMAC_GENERAL = _LowLevel.CKM_RIPEMD160_HMAC_GENERAL
CKM_SHA256 = _LowLevel.CKM_SHA256
CKM_SHA256_HMAC = _LowLevel.CKM_SHA256_HMAC
CKM_SHA256_HMAC_GENERAL = _LowLevel.CKM_SHA256_HMAC_GENERAL
CKM_SHA224 = _LowLevel.CKM_SHA224
CKM_SHA224_HMAC = _LowLevel.CKM_SHA224_HMAC
CKM_SHA224_HMAC_GENERAL = _LowLevel.CKM_SHA224_HMAC_GENERAL
CKM_SHA384 = _LowLevel.CKM_SHA384
CKM_SHA384_HMAC = _LowLevel.CKM_SHA384_HMAC
CKM_SHA384_HMAC_GENERAL = _LowLevel.CKM_SHA384_HMAC_GENERAL
CKM_SHA512 = _LowLevel.CKM_SHA512
CKM_SHA512_HMAC = _LowLevel.CKM_SHA512_HMAC
CKM_SHA512_HMAC_GENERAL = _LowLevel.CKM_SHA512_HMAC_GENERAL
CKM_SECURID_KEY_GEN = _LowLevel.CKM_SECURID_KEY_GEN
CKM_SECURID = _LowLevel.CKM_SECURID
CKM_HOTP_KEY_GEN = _LowLevel.CKM_HOTP_KEY_GEN
CKM_HOTP = _LowLevel.CKM_HOTP
CKM_ACTI = _LowLevel.CKM_ACTI
CKM_ACTI_KEY_GEN = _LowLevel.CKM_ACTI_KEY_GEN
CKM_SHA3_256 = _LowLevel.CKM_SHA3_256
CKM_SHA3_256_HMAC = _LowLevel.CKM_SHA3_256_HMAC
CKM_SHA3_256_HMAC_GENERAL = _LowLevel.CKM_SHA3_256_HMAC_GENERAL
CKM_SHA3_256_KEY_GEN = _LowLevel.CKM_SHA3_256_KEY_GEN
CKM_SHA3_224 = _LowLevel.CKM_SHA3_224
CKM_SHA3_224_HMAC = _LowLevel.CKM_SHA3_224_HMAC
CKM_SHA3_224_HMAC_GENERAL = _LowLevel.CKM_SHA3_224_HMAC_GENERAL
CKM_SHA3_224_KEY_GEN = _LowLevel.CKM_SHA3_224_KEY_GEN
CKM_SHA3_384 = _LowLevel.CKM_SHA3_384
CKM_SHA3_384_HMAC = _LowLevel.CKM_SHA3_384_HMAC
CKM_SHA3_384_HMAC_GENERAL = _LowLevel.CKM_SHA3_384_HMAC_GENERAL
CKM_SHA3_384_KEY_GEN = _LowLevel.CKM_SHA3_384_KEY_GEN
CKM_SHA3_512 = _LowLevel.CKM_SHA3_512
CKM_SHA3_512_HMAC = _LowLevel.CKM_SHA3_512_HMAC
CKM_SHA3_512_HMAC_GENERAL = _LowLevel.CKM_SHA3_512_HMAC_GENERAL
CKM_SHA3_512_KEY_GEN = _LowLevel.CKM_SHA3_512_KEY_GEN
CKM_CAST_KEY_GEN = _LowLevel.CKM_CAST_KEY_GEN
CKM_CAST_ECB = _LowLevel.CKM_CAST_ECB
CKM_CAST_CBC = _LowLevel.CKM_CAST_CBC
CKM_CAST_MAC = _LowLevel.CKM_CAST_MAC
CKM_CAST_MAC_GENERAL = _LowLevel.CKM_CAST_MAC_GENERAL
CKM_CAST_CBC_PAD = _LowLevel.CKM_CAST_CBC_PAD
CKM_CAST3_KEY_GEN = _LowLevel.CKM_CAST3_KEY_GEN
CKM_CAST3_ECB = _LowLevel.CKM_CAST3_ECB
CKM_CAST3_CBC = _LowLevel.CKM_CAST3_CBC
CKM_CAST3_MAC = _LowLevel.CKM_CAST3_MAC
CKM_CAST3_MAC_GENERAL = _LowLevel.CKM_CAST3_MAC_GENERAL
CKM_CAST3_CBC_PAD = _LowLevel.CKM_CAST3_CBC_PAD
CKM_CAST5_KEY_GEN = _LowLevel.CKM_CAST5_KEY_GEN
CKM_CAST128_KEY_GEN = _LowLevel.CKM_CAST128_KEY_GEN
CKM_CAST5_ECB = _LowLevel.CKM_CAST5_ECB
CKM_CAST128_ECB = _LowLevel.CKM_CAST128_ECB
CKM_CAST5_CBC = _LowLevel.CKM_CAST5_CBC
CKM_CAST128_CBC = _LowLevel.CKM_CAST128_CBC
CKM_CAST5_MAC = _LowLevel.CKM_CAST5_MAC
CKM_CAST128_MAC = _LowLevel.CKM_CAST128_MAC
CKM_CAST5_MAC_GENERAL = _LowLevel.CKM_CAST5_MAC_GENERAL
CKM_CAST128_MAC_GENERAL = _LowLevel.CKM_CAST128_MAC_GENERAL
CKM_CAST5_CBC_PAD = _LowLevel.CKM_CAST5_CBC_PAD
CKM_CAST128_CBC_PAD = _LowLevel.CKM_CAST128_CBC_PAD
CKM_RC5_KEY_GEN = _LowLevel.CKM_RC5_KEY_GEN
CKM_RC5_ECB = _LowLevel.CKM_RC5_ECB
CKM_RC5_CBC = _LowLevel.CKM_RC5_CBC
CKM_RC5_MAC = _LowLevel.CKM_RC5_MAC
CKM_RC5_MAC_GENERAL = _LowLevel.CKM_RC5_MAC_GENERAL
CKM_RC5_CBC_PAD = _LowLevel.CKM_RC5_CBC_PAD
CKM_IDEA_KEY_GEN = _LowLevel.CKM_IDEA_KEY_GEN
CKM_IDEA_ECB = _LowLevel.CKM_IDEA_ECB
CKM_IDEA_CBC = _LowLevel.CKM_IDEA_CBC
CKM_IDEA_MAC = _LowLevel.CKM_IDEA_MAC
CKM_IDEA_MAC_GENERAL = _LowLevel.CKM_IDEA_MAC_GENERAL
CKM_IDEA_CBC_PAD = _LowLevel.CKM_IDEA_CBC_PAD
CKM_GENERIC_SECRET_KEY_GEN = _LowLevel.CKM_GENERIC_SECRET_KEY_GEN
CKM_CONCATENATE_BASE_AND_KEY = _LowLevel.CKM_CONCATENATE_BASE_AND_KEY
CKM_CONCATENATE_BASE_AND_DATA = _LowLevel.CKM_CONCATENATE_BASE_AND_DATA
CKM_CONCATENATE_DATA_AND_BASE = _LowLevel.CKM_CONCATENATE_DATA_AND_BASE
CKM_XOR_BASE_AND_DATA = _LowLevel.CKM_XOR_BASE_AND_DATA
CKM_EXTRACT_KEY_FROM_KEY = _LowLevel.CKM_EXTRACT_KEY_FROM_KEY
CKM_SSL3_PRE_MASTER_KEY_GEN = _LowLevel.CKM_SSL3_PRE_MASTER_KEY_GEN
CKM_SSL3_MASTER_KEY_DERIVE = _LowLevel.CKM_SSL3_MASTER_KEY_DERIVE
CKM_SSL3_KEY_AND_MAC_DERIVE = _LowLevel.CKM_SSL3_KEY_AND_MAC_DERIVE
CKM_SSL3_MASTER_KEY_DERIVE_DH = _LowLevel.CKM_SSL3_MASTER_KEY_DERIVE_DH
CKM_TLS_PRE_MASTER_KEY_GEN = _LowLevel.CKM_TLS_PRE_MASTER_KEY_GEN
CKM_TLS_MASTER_KEY_DERIVE = _LowLevel.CKM_TLS_MASTER_KEY_DERIVE
CKM_TLS_KEY_AND_MAC_DERIVE = _LowLevel.CKM_TLS_KEY_AND_MAC_DERIVE
CKM_TLS_MASTER_KEY_DERIVE_DH = _LowLevel.CKM_TLS_MASTER_KEY_DERIVE_DH
CKM_TLS_PRF = _LowLevel.CKM_TLS_PRF
CKM_SSL3_MD5_MAC = _LowLevel.CKM_SSL3_MD5_MAC
CKM_SSL3_SHA1_MAC = _LowLevel.CKM_SSL3_SHA1_MAC
CKM_MD5_KEY_DERIVATION = _LowLevel.CKM_MD5_KEY_DERIVATION
CKM_MD2_KEY_DERIVATION = _LowLevel.CKM_MD2_KEY_DERIVATION
CKM_SHA1_KEY_DERIVATION = _LowLevel.CKM_SHA1_KEY_DERIVATION
CKM_SHA256_KEY_DERIVATION = _LowLevel.CKM_SHA256_KEY_DERIVATION
CKM_SHA384_KEY_DERIVATION = _LowLevel.CKM_SHA384_KEY_DERIVATION
CKM_SHA512_KEY_DERIVATION = _LowLevel.CKM_SHA512_KEY_DERIVATION
CKM_SHA224_KEY_DERIVATION = _LowLevel.CKM_SHA224_KEY_DERIVATION
CKM_SHA3_256_KEY_DERIVE = _LowLevel.CKM_SHA3_256_KEY_DERIVE
CKM_SHA3_224_KEY_DERIVE = _LowLevel.CKM_SHA3_224_KEY_DERIVE
CKM_SHA3_384_KEY_DERIVE = _LowLevel.CKM_SHA3_384_KEY_DERIVE
CKM_SHA3_512_KEY_DERIVE = _LowLevel.CKM_SHA3_512_KEY_DERIVE
CKM_SHAKE_128_KEY_DERIVE = _LowLevel.CKM_SHAKE_128_KEY_DERIVE
CKM_SHAKE_256_KEY_DERIVE = _LowLevel.CKM_SHAKE_256_KEY_DERIVE
CKM_PBE_MD2_DES_CBC = _LowLevel.CKM_PBE_MD2_DES_CBC
CKM_PBE_MD5_DES_CBC = _LowLevel.CKM_PBE_MD5_DES_CBC
CKM_PBE_MD5_CAST_CBC = _LowLevel.CKM_PBE_MD5_CAST_CBC
CKM_PBE_MD5_CAST3_CBC = _LowLevel.CKM_PBE_MD5_CAST3_CBC
CKM_PBE_MD5_CAST5_CBC = _LowLevel.CKM_PBE_MD5_CAST5_CBC
CKM_PBE_MD5_CAST128_CBC = _LowLevel.CKM_PBE_MD5_CAST128_CBC
CKM_PBE_SHA1_CAST5_CBC = _LowLevel.CKM_PBE_SHA1_CAST5_CBC
CKM_PBE_SHA1_CAST128_CBC = _LowLevel.CKM_PBE_SHA1_CAST128_CBC
CKM_PBE_SHA1_RC4_128 = _LowLevel.CKM_PBE_SHA1_RC4_128
CKM_PBE_SHA1_RC4_40 = _LowLevel.CKM_PBE_SHA1_RC4_40
CKM_PBE_SHA1_DES3_EDE_CBC = _LowLevel.CKM_PBE_SHA1_DES3_EDE_CBC
CKM_PBE_SHA1_DES2_EDE_CBC = _LowLevel.CKM_PBE_SHA1_DES2_EDE_CBC
CKM_PBE_SHA1_RC2_128_CBC = _LowLevel.CKM_PBE_SHA1_RC2_128_CBC
CKM_PBE_SHA1_RC2_40_CBC = _LowLevel.CKM_PBE_SHA1_RC2_40_CBC
CKM_SP800_108_COUNTER_KDF = _LowLevel.CKM_SP800_108_COUNTER_KDF
CKM_SP800_108_FEEDBACK_KDF = _LowLevel.CKM_SP800_108_FEEDBACK_KDF
CKM_SP800_108_DOUBLE_PIPELINE_KDF = _LowLevel.CKM_SP800_108_DOUBLE_PIPELINE_KDF
CKM_PKCS5_PBKD2 = _LowLevel.CKM_PKCS5_PBKD2
CKM_PBA_SHA1_WITH_SHA1_HMAC = _LowLevel.CKM_PBA_SHA1_WITH_SHA1_HMAC
CKM_WTLS_PRE_MASTER_KEY_GEN = _LowLevel.CKM_WTLS_PRE_MASTER_KEY_GEN
CKM_WTLS_MASTER_KEY_DERIVE = _LowLevel.CKM_WTLS_MASTER_KEY_DERIVE
CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC = _LowLevel.CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC
CKM_WTLS_PRF = _LowLevel.CKM_WTLS_PRF
CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE = _LowLevel.CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE
CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE = _LowLevel.CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE
CKM_TLS10_MAC_SERVER = _LowLevel.CKM_TLS10_MAC_SERVER
CKM_TLS10_MAC_CLIENT = _LowLevel.CKM_TLS10_MAC_CLIENT
CKM_TLS12_MAC = _LowLevel.CKM_TLS12_MAC
CKM_TLS12_KDF = _LowLevel.CKM_TLS12_KDF
CKM_TLS12_MASTER_KEY_DERIVE = _LowLevel.CKM_TLS12_MASTER_KEY_DERIVE
CKM_TLS12_KEY_AND_MAC_DERIVE = _LowLevel.CKM_TLS12_KEY_AND_MAC_DERIVE
CKM_TLS12_MASTER_KEY_DERIVE_DH = _LowLevel.CKM_TLS12_MASTER_KEY_DERIVE_DH
CKM_TLS12_KEY_SAFE_DERIVE = _LowLevel.CKM_TLS12_KEY_SAFE_DERIVE
CKM_TLS_MAC = _LowLevel.CKM_TLS_MAC
CKM_TLS_KDF = _LowLevel.CKM_TLS_KDF
CKM_KEY_WRAP_LYNKS = _LowLevel.CKM_KEY_WRAP_LYNKS
CKM_KEY_WRAP_SET_OAEP = _LowLevel.CKM_KEY_WRAP_SET_OAEP
CKM_CMS_SIG = _LowLevel.CKM_CMS_SIG
CKM_KIP_DERIVE = _LowLevel.CKM_KIP_DERIVE
CKM_KIP_WRAP = _LowLevel.CKM_KIP_WRAP
CKM_KIP_MAC = _LowLevel.CKM_KIP_MAC
CKM_CAMELLIA_KEY_GEN = _LowLevel.CKM_CAMELLIA_KEY_GEN
CKM_CAMELLIA_ECB = _LowLevel.CKM_CAMELLIA_ECB
CKM_CAMELLIA_CBC = _LowLevel.CKM_CAMELLIA_CBC
CKM_CAMELLIA_MAC = _LowLevel.CKM_CAMELLIA_MAC
CKM_CAMELLIA_MAC_GENERAL = _LowLevel.CKM_CAMELLIA_MAC_GENERAL
CKM_CAMELLIA_CBC_PAD = _LowLevel.CKM_CAMELLIA_CBC_PAD
CKM_CAMELLIA_ECB_ENCRYPT_DATA = _LowLevel.CKM_CAMELLIA_ECB_ENCRYPT_DATA
CKM_CAMELLIA_CBC_ENCRYPT_DATA = _LowLevel.CKM_CAMELLIA_CBC_ENCRYPT_DATA
CKM_CAMELLIA_CTR = _LowLevel.CKM_CAMELLIA_CTR
CKM_ARIA_KEY_GEN = _LowLevel.CKM_ARIA_KEY_GEN
CKM_ARIA_ECB = _LowLevel.CKM_ARIA_ECB
CKM_ARIA_CBC = _LowLevel.CKM_ARIA_CBC
CKM_ARIA_MAC = _LowLevel.CKM_ARIA_MAC
CKM_ARIA_MAC_GENERAL = _LowLevel.CKM_ARIA_MAC_GENERAL
CKM_ARIA_CBC_PAD = _LowLevel.CKM_ARIA_CBC_PAD
CKM_ARIA_ECB_ENCRYPT_DATA = _LowLevel.CKM_ARIA_ECB_ENCRYPT_DATA
CKM_ARIA_CBC_ENCRYPT_DATA = _LowLevel.CKM_ARIA_CBC_ENCRYPT_DATA
CKM_SEED_KEY_GEN = _LowLevel.CKM_SEED_KEY_GEN
CKM_SEED_ECB = _LowLevel.CKM_SEED_ECB
CKM_SEED_CBC = _LowLevel.CKM_SEED_CBC
CKM_SEED_MAC = _LowLevel.CKM_SEED_MAC
CKM_SEED_MAC_GENERAL = _LowLevel.CKM_SEED_MAC_GENERAL
CKM_SEED_CBC_PAD = _LowLevel.CKM_SEED_CBC_PAD
CKM_SEED_ECB_ENCRYPT_DATA = _LowLevel.CKM_SEED_ECB_ENCRYPT_DATA
CKM_SEED_CBC_ENCRYPT_DATA = _LowLevel.CKM_SEED_CBC_ENCRYPT_DATA
CKM_SKIPJACK_KEY_GEN = _LowLevel.CKM_SKIPJACK_KEY_GEN
CKM_SKIPJACK_ECB64 = _LowLevel.CKM_SKIPJACK_ECB64
CKM_SKIPJACK_CBC64 = _LowLevel.CKM_SKIPJACK_CBC64
CKM_SKIPJACK_OFB64 = _LowLevel.CKM_SKIPJACK_OFB64
CKM_SKIPJACK_CFB64 = _LowLevel.CKM_SKIPJACK_CFB64
CKM_SKIPJACK_CFB32 = _LowLevel.CKM_SKIPJACK_CFB32
CKM_SKIPJACK_CFB16 = _LowLevel.CKM_SKIPJACK_CFB16
CKM_SKIPJACK_CFB8 = _LowLevel.CKM_SKIPJACK_CFB8
CKM_SKIPJACK_WRAP = _LowLevel.CKM_SKIPJACK_WRAP
CKM_SKIPJACK_PRIVATE_WRAP = _LowLevel.CKM_SKIPJACK_PRIVATE_WRAP
CKM_SKIPJACK_RELAYX = _LowLevel.CKM_SKIPJACK_RELAYX
CKM_KEA_KEY_PAIR_GEN = _LowLevel.CKM_KEA_KEY_PAIR_GEN
CKM_KEA_KEY_DERIVE = _LowLevel.CKM_KEA_KEY_DERIVE
CKM_KEA_DERIVE = _LowLevel.CKM_KEA_DERIVE
CKM_FORTEZZA_TIMESTAMP = _LowLevel.CKM_FORTEZZA_TIMESTAMP
CKM_BATON_KEY_GEN = _LowLevel.CKM_BATON_KEY_GEN
CKM_BATON_ECB128 = _LowLevel.CKM_BATON_ECB128
CKM_BATON_ECB96 = _LowLevel.CKM_BATON_ECB96
CKM_BATON_CBC128 = _LowLevel.CKM_BATON_CBC128
CKM_BATON_COUNTER = _LowLevel.CKM_BATON_COUNTER
CKM_BATON_SHUFFLE = _LowLevel.CKM_BATON_SHUFFLE
CKM_BATON_WRAP = _LowLevel.CKM_BATON_WRAP
CKM_ECDSA_KEY_PAIR_GEN = _LowLevel.CKM_ECDSA_KEY_PAIR_GEN
CKM_EC_KEY_PAIR_GEN = _LowLevel.CKM_EC_KEY_PAIR_GEN
CKM_ECDSA = _LowLevel.CKM_ECDSA
CKM_ECDSA_SHA1 = _LowLevel.CKM_ECDSA_SHA1
CKM_ECDSA_SHA224 = _LowLevel.CKM_ECDSA_SHA224
CKM_ECDSA_SHA256 = _LowLevel.CKM_ECDSA_SHA256
CKM_ECDSA_SHA384 = _LowLevel.CKM_ECDSA_SHA384
CKM_ECDSA_SHA512 = _LowLevel.CKM_ECDSA_SHA512
CKM_ECDSA_SHA3_224 = _LowLevel.CKM_ECDSA_SHA3_224
CKM_ECDSA_SHA3_256 = _LowLevel.CKM_ECDSA_SHA3_256
CKM_ECDSA_SHA3_384 = _LowLevel.CKM_ECDSA_SHA3_384
CKM_ECDSA_SHA3_512 = _LowLevel.CKM_ECDSA_SHA3_512
CKM_ECDH1_DERIVE = _LowLevel.CKM_ECDH1_DERIVE
CKM_ECDH1_COFACTOR_DERIVE = _LowLevel.CKM_ECDH1_COFACTOR_DERIVE
CKM_ECMQV_DERIVE = _LowLevel.CKM_ECMQV_DERIVE
CKM_ECDH_AES_KEY_WRAP = _LowLevel.CKM_ECDH_AES_KEY_WRAP
CKM_RSA_AES_KEY_WRAP = _LowLevel.CKM_RSA_AES_KEY_WRAP
CKM_EC_EDWARDS_KEY_PAIR_GEN = _LowLevel.CKM_EC_EDWARDS_KEY_PAIR_GEN
CKM_EC_MONTGOMERY_KEY_PAIR_GEN = _LowLevel.CKM_EC_MONTGOMERY_KEY_PAIR_GEN
CKM_EDDSA = _LowLevel.CKM_EDDSA
CKM_JUNIPER_KEY_GEN = _LowLevel.CKM_JUNIPER_KEY_GEN
CKM_JUNIPER_ECB128 = _LowLevel.CKM_JUNIPER_ECB128
CKM_JUNIPER_CBC128 = _LowLevel.CKM_JUNIPER_CBC128
CKM_JUNIPER_COUNTER = _LowLevel.CKM_JUNIPER_COUNTER
CKM_JUNIPER_SHUFFLE = _LowLevel.CKM_JUNIPER_SHUFFLE
CKM_JUNIPER_WRAP = _LowLevel.CKM_JUNIPER_WRAP
CKM_FASTHASH = _LowLevel.CKM_FASTHASH
CKM_AES_XTS = _LowLevel.CKM_AES_XTS
CKM_AES_XTS_KEY_GEN = _LowLevel.CKM_AES_XTS_KEY_GEN
CKM_AES_KEY_GEN = _LowLevel.CKM_AES_KEY_GEN
CKM_AES_ECB = _LowLevel.CKM_AES_ECB
CKM_AES_CBC = _LowLevel.CKM_AES_CBC
CKM_AES_MAC = _LowLevel.CKM_AES_MAC
CKM_AES_MAC_GENERAL = _LowLevel.CKM_AES_MAC_GENERAL
CKM_AES_CBC_PAD = _LowLevel.CKM_AES_CBC_PAD
CKM_AES_CTR = _LowLevel.CKM_AES_CTR
CKM_AES_GCM = _LowLevel.CKM_AES_GCM
CKM_AES_CCM = _LowLevel.CKM_AES_CCM
CKM_AES_CTS = _LowLevel.CKM_AES_CTS
CKM_AES_CMAC = _LowLevel.CKM_AES_CMAC
CKM_AES_CMAC_GENERAL = _LowLevel.CKM_AES_CMAC_GENERAL
CKM_AES_XCBC_MAC = _LowLevel.CKM_AES_XCBC_MAC
CKM_AES_XCBC_MAC_96 = _LowLevel.CKM_AES_XCBC_MAC_96
CKM_AES_GMAC = _LowLevel.CKM_AES_GMAC
CKM_BLOWFISH_KEY_GEN = _LowLevel.CKM_BLOWFISH_KEY_GEN
CKM_BLOWFISH_CBC = _LowLevel.CKM_BLOWFISH_CBC
CKM_TWOFISH_KEY_GEN = _LowLevel.CKM_TWOFISH_KEY_GEN
CKM_TWOFISH_CBC = _LowLevel.CKM_TWOFISH_CBC
CKM_BLOWFISH_CBC_PAD = _LowLevel.CKM_BLOWFISH_CBC_PAD
CKM_TWOFISH_CBC_PAD = _LowLevel.CKM_TWOFISH_CBC_PAD
CKM_DES_ECB_ENCRYPT_DATA = _LowLevel.CKM_DES_ECB_ENCRYPT_DATA
CKM_DES_CBC_ENCRYPT_DATA = _LowLevel.CKM_DES_CBC_ENCRYPT_DATA
CKM_DES3_ECB_ENCRYPT_DATA = _LowLevel.CKM_DES3_ECB_ENCRYPT_DATA
CKM_DES3_CBC_ENCRYPT_DATA = _LowLevel.CKM_DES3_CBC_ENCRYPT_DATA
CKM_AES_ECB_ENCRYPT_DATA = _LowLevel.CKM_AES_ECB_ENCRYPT_DATA
CKM_AES_CBC_ENCRYPT_DATA = _LowLevel.CKM_AES_CBC_ENCRYPT_DATA
CKM_GOSTR3410_KEY_PAIR_GEN = _LowLevel.CKM_GOSTR3410_KEY_PAIR_GEN
CKM_GOSTR3410 = _LowLevel.CKM_GOSTR3410
CKM_GOSTR3410_WITH_GOSTR3411 = _LowLevel.CKM_GOSTR3410_WITH_GOSTR3411
CKM_GOSTR3410_KEY_WRAP = _LowLevel.CKM_GOSTR3410_KEY_WRAP
CKM_GOSTR3410_DERIVE = _LowLevel.CKM_GOSTR3410_DERIVE
CKM_GOSTR3411 = _LowLevel.CKM_GOSTR3411
CKM_GOSTR3411_HMAC = _LowLevel.CKM_GOSTR3411_HMAC
CKM_GOST28147_KEY_GEN = _LowLevel.CKM_GOST28147_KEY_GEN
CKM_GOST28147_ECB = _LowLevel.CKM_GOST28147_ECB
CKM_GOST28147 = _LowLevel.CKM_GOST28147
CKM_GOST28147_MAC = _LowLevel.CKM_GOST28147_MAC
CKM_GOST28147_KEY_WRAP = _LowLevel.CKM_GOST28147_KEY_WRAP
CKM_CHACHA20_KEY_GEN = _LowLevel.CKM_CHACHA20_KEY_GEN
CKM_CHACHA20 = _LowLevel.CKM_CHACHA20
CKM_POLY1305_KEY_GEN = _LowLevel.CKM_POLY1305_KEY_GEN
CKM_POLY1305 = _LowLevel.CKM_POLY1305
CKM_DSA_PARAMETER_GEN = _LowLevel.CKM_DSA_PARAMETER_GEN
CKM_DH_PKCS_PARAMETER_GEN = _LowLevel.CKM_DH_PKCS_PARAMETER_GEN
CKM_X9_42_DH_PARAMETER_GEN = _LowLevel.CKM_X9_42_DH_PARAMETER_GEN
CKM_DSA_PROBABLISTIC_PARAMETER_GEN = _LowLevel.CKM_DSA_PROBABLISTIC_PARAMETER_GEN
CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN = _LowLevel.CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN
CKM_AES_OFB = _LowLevel.CKM_AES_OFB
CKM_AES_CFB64 = _LowLevel.CKM_AES_CFB64
CKM_AES_CFB8 = _LowLevel.CKM_AES_CFB8
CKM_AES_CFB128 = _LowLevel.CKM_AES_CFB128
CKM_AES_CFB1 = _LowLevel.CKM_AES_CFB1
CKM_AES_KEY_WRAP = _LowLevel.CKM_AES_KEY_WRAP
CKM_AES_KEY_WRAP_PAD = _LowLevel.CKM_AES_KEY_WRAP_PAD
CKM_AES_KEY_WRAP_KWP = _LowLevel.CKM_AES_KEY_WRAP_KWP
CKM_RSA_PKCS_TPM_1_1 = _LowLevel.CKM_RSA_PKCS_TPM_1_1
CKM_RSA_PKCS_OAEP_TPM_1_1 = _LowLevel.CKM_RSA_PKCS_OAEP_TPM_1_1
CKM_SHA_1_KEY_GEN = _LowLevel.CKM_SHA_1_KEY_GEN
CKM_SHA224_KEY_GEN = _LowLevel.CKM_SHA224_KEY_GEN
CKM_SHA256_KEY_GEN = _LowLevel.CKM_SHA256_KEY_GEN
CKM_SHA384_KEY_GEN = _LowLevel.CKM_SHA384_KEY_GEN
CKM_SHA512_KEY_GEN = _LowLevel.CKM_SHA512_KEY_GEN
CKM_SHA512_224_KEY_GEN = _LowLevel.CKM_SHA512_224_KEY_GEN
CKM_SHA512_256_KEY_GEN = _LowLevel.CKM_SHA512_256_KEY_GEN
CKM_SHA512_T_KEY_GEN = _LowLevel.CKM_SHA512_T_KEY_GEN
CKM_NULL = _LowLevel.CKM_NULL
CKM_BLAKE2B_160 = _LowLevel.CKM_BLAKE2B_160
CKM_BLAKE2B_160_HMAC = _LowLevel.CKM_BLAKE2B_160_HMAC
CKM_BLAKE2B_160_HMAC_GENERAL = _LowLevel.CKM_BLAKE2B_160_HMAC_GENERAL
CKM_BLAKE2B_160_KEY_DERIVE = _LowLevel.CKM_BLAKE2B_160_KEY_DERIVE
CKM_BLAKE2B_160_KEY_GEN = _LowLevel.CKM_BLAKE2B_160_KEY_GEN
CKM_BLAKE2B_256 = _LowLevel.CKM_BLAKE2B_256
CKM_BLAKE2B_256_HMAC = _LowLevel.CKM_BLAKE2B_256_HMAC
CKM_BLAKE2B_256_HMAC_GENERAL = _LowLevel.CKM_BLAKE2B_256_HMAC_GENERAL
CKM_BLAKE2B_256_KEY_DERIVE = _LowLevel.CKM_BLAKE2B_256_KEY_DERIVE
CKM_BLAKE2B_256_KEY_GEN = _LowLevel.CKM_BLAKE2B_256_KEY_GEN
CKM_BLAKE2B_384 = _LowLevel.CKM_BLAKE2B_384
CKM_BLAKE2B_384_HMAC = _LowLevel.CKM_BLAKE2B_384_HMAC
CKM_BLAKE2B_384_HMAC_GENERAL = _LowLevel.CKM_BLAKE2B_384_HMAC_GENERAL
CKM_BLAKE2B_384_KEY_DERIVE = _LowLevel.CKM_BLAKE2B_384_KEY_DERIVE
CKM_BLAKE2B_384_KEY_GEN = _LowLevel.CKM_BLAKE2B_384_KEY_GEN
CKM_BLAKE2B_512 = _LowLevel.CKM_BLAKE2B_512
CKM_BLAKE2B_512_HMAC = _LowLevel.CKM_BLAKE2B_512_HMAC
CKM_BLAKE2B_512_HMAC_GENERAL = _LowLevel.CKM_BLAKE2B_512_HMAC_GENERAL
CKM_BLAKE2B_512_KEY_DERIVE = _LowLevel.CKM_BLAKE2B_512_KEY_DERIVE
CKM_BLAKE2B_512_KEY_GEN = _LowLevel.CKM_BLAKE2B_512_KEY_GEN
CKM_SALSA20 = _LowLevel.CKM_SALSA20
CKM_CHACHA20_POLY1305 = _LowLevel.CKM_CHACHA20_POLY1305
CKM_SALSA20_POLY1305 = _LowLevel.CKM_SALSA20_POLY1305
CKM_X3DH_INITIALIZE = _LowLevel.CKM_X3DH_INITIALIZE
CKM_X3DH_RESPOND = _LowLevel.CKM_X3DH_RESPOND
CKM_X2RATCHET_INITIALIZE = _LowLevel.CKM_X2RATCHET_INITIALIZE
CKM_X2RATCHET_RESPOND = _LowLevel.CKM_X2RATCHET_RESPOND
CKM_X2RATCHET_ENCRYPT = _LowLevel.CKM_X2RATCHET_ENCRYPT
CKM_X2RATCHET_DECRYPT = _LowLevel.CKM_X2RATCHET_DECRYPT
CKM_XEDDSA = _LowLevel.CKM_XEDDSA
CKM_HKDF_DERIVE = _LowLevel.CKM_HKDF_DERIVE
CKM_HKDF_DATA = _LowLevel.CKM_HKDF_DATA
CKM_HKDF_KEY_GEN = _LowLevel.CKM_HKDF_KEY_GEN
CKM_VENDOR_DEFINED = _LowLevel.CKM_VENDOR_DEFINED
CKG_MGF1_SHA1 = _LowLevel.CKG_MGF1_SHA1
CKG_MGF1_SHA256 = _LowLevel.CKG_MGF1_SHA256
CKG_MGF1_SHA384 = _LowLevel.CKG_MGF1_SHA384
CKG_MGF1_SHA512 = _LowLevel.CKG_MGF1_SHA512
CKF_HW = _LowLevel.CKF_HW
CKF_MESSAGE_ENCRYPT = _LowLevel.CKF_MESSAGE_ENCRYPT
CKF_MESSAGE_DECRYPT = _LowLevel.CKF_MESSAGE_DECRYPT
CKF_MESSAGE_SIGN = _LowLevel.CKF_MESSAGE_SIGN
CKF_MESSAGE_VERIFY = _LowLevel.CKF_MESSAGE_VERIFY
CKF_MULTI_MESSGE = _LowLevel.CKF_MULTI_MESSGE
CKF_FIND_OBJECTS = _LowLevel.CKF_FIND_OBJECTS
CKF_ENCRYPT = _LowLevel.CKF_ENCRYPT
CKF_DECRYPT = _LowLevel.CKF_DECRYPT
CKF_DIGEST = _LowLevel.CKF_DIGEST
CKF_SIGN = _LowLevel.CKF_SIGN
CKF_SIGN_RECOVER = _LowLevel.CKF_SIGN_RECOVER
CKF_VERIFY = _LowLevel.CKF_VERIFY
CKF_VERIFY_RECOVER = _LowLevel.CKF_VERIFY_RECOVER
CKF_GENERATE = _LowLevel.CKF_GENERATE
CKF_GENERATE_KEY_PAIR = _LowLevel.CKF_GENERATE_KEY_PAIR
CKF_WRAP = _LowLevel.CKF_WRAP
CKF_UNWRAP = _LowLevel.CKF_UNWRAP
CKF_DERIVE = _LowLevel.CKF_DERIVE
CKF_EC_F_P = _LowLevel.CKF_EC_F_P
CKF_EC_F_2M = _LowLevel.CKF_EC_F_2M
CKF_EC_ECPARAMETERS = _LowLevel.CKF_EC_ECPARAMETERS
CKF_EC_NAMEDCURVE = _LowLevel.CKF_EC_NAMEDCURVE
CKF_EC_UNCOMPRESS = _LowLevel.CKF_EC_UNCOMPRESS
CKF_EC_COMPRESS = _LowLevel.CKF_EC_COMPRESS
CKF_EC_CURVENAME = _LowLevel.CKF_EC_CURVENAME
CKF_EXTENSION = _LowLevel.CKF_EXTENSION
CKR_OK = _LowLevel.CKR_OK
CKR_CANCEL = _LowLevel.CKR_CANCEL
CKR_HOST_MEMORY = _LowLevel.CKR_HOST_MEMORY
CKR_SLOT_ID_INVALID = _LowLevel.CKR_SLOT_ID_INVALID
CKR_GENERAL_ERROR = _LowLevel.CKR_GENERAL_ERROR
CKR_FUNCTION_FAILED = _LowLevel.CKR_FUNCTION_FAILED
CKR_ARGUMENTS_BAD = _LowLevel.CKR_ARGUMENTS_BAD
CKR_NO_EVENT = _LowLevel.CKR_NO_EVENT
CKR_NEED_TO_CREATE_THREADS = _LowLevel.CKR_NEED_TO_CREATE_THREADS
CKR_CANT_LOCK = _LowLevel.CKR_CANT_LOCK
CKR_ATTRIBUTE_READ_ONLY = _LowLevel.CKR_ATTRIBUTE_READ_ONLY
CKR_ATTRIBUTE_SENSITIVE = _LowLevel.CKR_ATTRIBUTE_SENSITIVE
CKR_ATTRIBUTE_TYPE_INVALID = _LowLevel.CKR_ATTRIBUTE_TYPE_INVALID
CKR_ATTRIBUTE_VALUE_INVALID = _LowLevel.CKR_ATTRIBUTE_VALUE_INVALID
CKR_DATA_INVALID = _LowLevel.CKR_DATA_INVALID
CKR_DATA_LEN_RANGE = _LowLevel.CKR_DATA_LEN_RANGE
CKR_DEVICE_ERROR = _LowLevel.CKR_DEVICE_ERROR
CKR_DEVICE_MEMORY = _LowLevel.CKR_DEVICE_MEMORY
CKR_DEVICE_REMOVED = _LowLevel.CKR_DEVICE_REMOVED
CKR_ENCRYPTED_DATA_INVALID = _LowLevel.CKR_ENCRYPTED_DATA_INVALID
CKR_ENCRYPTED_DATA_LEN_RANGE = _LowLevel.CKR_ENCRYPTED_DATA_LEN_RANGE
CKR_FUNCTION_CANCELED = _LowLevel.CKR_FUNCTION_CANCELED
CKR_FUNCTION_NOT_PARALLEL = _LowLevel.CKR_FUNCTION_NOT_PARALLEL
CKR_FUNCTION_NOT_SUPPORTED = _LowLevel.CKR_FUNCTION_NOT_SUPPORTED
CKR_KEY_HANDLE_INVALID = _LowLevel.CKR_KEY_HANDLE_INVALID
CKR_KEY_SIZE_RANGE = _LowLevel.CKR_KEY_SIZE_RANGE
CKR_KEY_TYPE_INCONSISTENT = _LowLevel.CKR_KEY_TYPE_INCONSISTENT
CKR_KEY_NOT_NEEDED = _LowLevel.CKR_KEY_NOT_NEEDED
CKR_KEY_CHANGED = _LowLevel.CKR_KEY_CHANGED
CKR_KEY_NEEDED = _LowLevel.CKR_KEY_NEEDED
CKR_KEY_INDIGESTIBLE = _LowLevel.CKR_KEY_INDIGESTIBLE
CKR_KEY_FUNCTION_NOT_PERMITTED = _LowLevel.CKR_KEY_FUNCTION_NOT_PERMITTED
CKR_KEY_NOT_WRAPPABLE = _LowLevel.CKR_KEY_NOT_WRAPPABLE
CKR_KEY_UNEXTRACTABLE = _LowLevel.CKR_KEY_UNEXTRACTABLE
CKR_MECHANISM_INVALID = _LowLevel.CKR_MECHANISM_INVALID
CKR_MECHANISM_PARAM_INVALID = _LowLevel.CKR_MECHANISM_PARAM_INVALID
CKR_OBJECT_HANDLE_INVALID = _LowLevel.CKR_OBJECT_HANDLE_INVALID
CKR_OPERATION_ACTIVE = _LowLevel.CKR_OPERATION_ACTIVE
CKR_OPERATION_NOT_INITIALIZED = _LowLevel.CKR_OPERATION_NOT_INITIALIZED
CKR_PIN_INCORRECT = _LowLevel.CKR_PIN_INCORRECT
CKR_PIN_INVALID = _LowLevel.CKR_PIN_INVALID
CKR_PIN_LEN_RANGE = _LowLevel.CKR_PIN_LEN_RANGE
CKR_PIN_EXPIRED = _LowLevel.CKR_PIN_EXPIRED
CKR_PIN_LOCKED = _LowLevel.CKR_PIN_LOCKED
CKR_SESSION_CLOSED = _LowLevel.CKR_SESSION_CLOSED
CKR_SESSION_COUNT = _LowLevel.CKR_SESSION_COUNT
CKR_SESSION_HANDLE_INVALID = _LowLevel.CKR_SESSION_HANDLE_INVALID
CKR_SESSION_PARALLEL_NOT_SUPPORTED = _LowLevel.CKR_SESSION_PARALLEL_NOT_SUPPORTED
CKR_SESSION_READ_ONLY = _LowLevel.CKR_SESSION_READ_ONLY
CKR_SESSION_EXISTS = _LowLevel.CKR_SESSION_EXISTS
CKR_SESSION_READ_ONLY_EXISTS = _LowLevel.CKR_SESSION_READ_ONLY_EXISTS
CKR_SESSION_READ_WRITE_SO_EXISTS = _LowLevel.CKR_SESSION_READ_WRITE_SO_EXISTS
CKR_SIGNATURE_INVALID = _LowLevel.CKR_SIGNATURE_INVALID
CKR_SIGNATURE_LEN_RANGE = _LowLevel.CKR_SIGNATURE_LEN_RANGE
CKR_TEMPLATE_INCOMPLETE = _LowLevel.CKR_TEMPLATE_INCOMPLETE
CKR_TEMPLATE_INCONSISTENT = _LowLevel.CKR_TEMPLATE_INCONSISTENT
CKR_TOKEN_NOT_PRESENT = _LowLevel.CKR_TOKEN_NOT_PRESENT
CKR_TOKEN_NOT_RECOGNIZED = _LowLevel.CKR_TOKEN_NOT_RECOGNIZED
CKR_TOKEN_WRITE_PROTECTED = _LowLevel.CKR_TOKEN_WRITE_PROTECTED
CKR_UNWRAPPING_KEY_HANDLE_INVALID = _LowLevel.CKR_UNWRAPPING_KEY_HANDLE_INVALID
CKR_UNWRAPPING_KEY_SIZE_RANGE = _LowLevel.CKR_UNWRAPPING_KEY_SIZE_RANGE
CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = _LowLevel.CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT
CKR_USER_ALREADY_LOGGED_IN = _LowLevel.CKR_USER_ALREADY_LOGGED_IN
CKR_USER_NOT_LOGGED_IN = _LowLevel.CKR_USER_NOT_LOGGED_IN
CKR_USER_PIN_NOT_INITIALIZED = _LowLevel.CKR_USER_PIN_NOT_INITIALIZED
CKR_USER_TYPE_INVALID = _LowLevel.CKR_USER_TYPE_INVALID
CKR_USER_ANOTHER_ALREADY_LOGGED_IN = _LowLevel.CKR_USER_ANOTHER_ALREADY_LOGGED_IN
CKR_USER_TOO_MANY_TYPES = _LowLevel.CKR_USER_TOO_MANY_TYPES
CKR_WRAPPED_KEY_INVALID = _LowLevel.CKR_WRAPPED_KEY_INVALID
CKR_WRAPPED_KEY_LEN_RANGE = _LowLevel.CKR_WRAPPED_KEY_LEN_RANGE
CKR_WRAPPING_KEY_HANDLE_INVALID = _LowLevel.CKR_WRAPPING_KEY_HANDLE_INVALID
CKR_WRAPPING_KEY_SIZE_RANGE = _LowLevel.CKR_WRAPPING_KEY_SIZE_RANGE
CKR_WRAPPING_KEY_TYPE_INCONSISTENT = _LowLevel.CKR_WRAPPING_KEY_TYPE_INCONSISTENT
CKR_RANDOM_SEED_NOT_SUPPORTED = _LowLevel.CKR_RANDOM_SEED_NOT_SUPPORTED
CKR_RANDOM_NO_RNG = _LowLevel.CKR_RANDOM_NO_RNG
CKR_DOMAIN_PARAMS_INVALID = _LowLevel.CKR_DOMAIN_PARAMS_INVALID
CKR_CURVE_NOT_SUPPORTED = _LowLevel.CKR_CURVE_NOT_SUPPORTED
CKR_BUFFER_TOO_SMALL = _LowLevel.CKR_BUFFER_TOO_SMALL
CKR_SAVED_STATE_INVALID = _LowLevel.CKR_SAVED_STATE_INVALID
CKR_INFORMATION_SENSITIVE = _LowLevel.CKR_INFORMATION_SENSITIVE
CKR_STATE_UNSAVEABLE = _LowLevel.CKR_STATE_UNSAVEABLE
CKR_CRYPTOKI_NOT_INITIALIZED = _LowLevel.CKR_CRYPTOKI_NOT_INITIALIZED
CKR_CRYPTOKI_ALREADY_INITIALIZED = _LowLevel.CKR_CRYPTOKI_ALREADY_INITIALIZED
CKR_MUTEX_BAD = _LowLevel.CKR_MUTEX_BAD
CKR_MUTEX_NOT_LOCKED = _LowLevel.CKR_MUTEX_NOT_LOCKED
CKR_NEW_PIN_MODE = _LowLevel.CKR_NEW_PIN_MODE
CKR_NEXT_OTP = _LowLevel.CKR_NEXT_OTP
CKR_EXCEEDED_MAX_ITERATIONS = _LowLevel.CKR_EXCEEDED_MAX_ITERATIONS
CKR_FIPS_SELF_TEST_FAILED = _LowLevel.CKR_FIPS_SELF_TEST_FAILED
CKR_LIBRARY_LOAD_FAILED = _LowLevel.CKR_LIBRARY_LOAD_FAILED
CKR_PIN_TOO_WEAK = _LowLevel.CKR_PIN_TOO_WEAK
CKR_PUBLIC_KEY_INVALID = _LowLevel.CKR_PUBLIC_KEY_INVALID
CKR_FUNCTION_REJECTED = _LowLevel.CKR_FUNCTION_REJECTED
CKR_VENDOR_DEFINED = _LowLevel.CKR_VENDOR_DEFINED
CKF_LIBRARY_CANT_CREATE_OS_THREADS = _LowLevel.CKF_LIBRARY_CANT_CREATE_OS_THREADS
CKF_OS_LOCKING_OK = _LowLevel.CKF_OS_LOCKING_OK
CKF_DONT_BLOCK = _LowLevel.CKF_DONT_BLOCK
CKG_MGF1_SHA224 = _LowLevel.CKG_MGF1_SHA224
CKZ_DATA_SPECIFIED = _LowLevel.CKZ_DATA_SPECIFIED
CKD_NULL = _LowLevel.CKD_NULL
CKD_SHA1_KDF = _LowLevel.CKD_SHA1_KDF
CKD_SHA1_KDF_ASN1 = _LowLevel.CKD_SHA1_KDF_ASN1
CKD_SHA1_KDF_CONCATENATE = _LowLevel.CKD_SHA1_KDF_CONCATENATE
CKD_SHA224_KDF = _LowLevel.CKD_SHA224_KDF
CKD_SHA256_KDF = _LowLevel.CKD_SHA256_KDF
CKD_SHA384_KDF = _LowLevel.CKD_SHA384_KDF
CKD_SHA512_KDF = _LowLevel.CKD_SHA512_KDF
CKD_CPDIVERSIFY_KDF = _LowLevel.CKD_CPDIVERSIFY_KDF
CKD_SHA3_224_KDF = _LowLevel.CKD_SHA3_224_KDF
CKD_SHA3_256_KDF = _LowLevel.CKD_SHA3_256_KDF
CKD_SHA3_384_KDF = _LowLevel.CKD_SHA3_384_KDF
CKD_SHA3_512_KDF = _LowLevel.CKD_SHA3_512_KDF
CKD_SHA1_KDF_SP800 = _LowLevel.CKD_SHA1_KDF_SP800
CKD_SHA224_KDF_SP800 = _LowLevel.CKD_SHA224_KDF_SP800
CKD_SHA256_KDF_SP800 = _LowLevel.CKD_SHA256_KDF_SP800
CKD_SHA384_KDF_SP800 = _LowLevel.CKD_SHA384_KDF_SP800
CKD_SHA512_KDF_SP800 = _LowLevel.CKD_SHA512_KDF_SP800
CKD_SHA3_224_KDF_SP800 = _LowLevel.CKD_SHA3_224_KDF_SP800
CKD_SHA3_256_KDF_SP800 = _LowLevel.CKD_SHA3_256_KDF_SP800
CKD_SHA3_384_KDF_SP800 = _LowLevel.CKD_SHA3_384_KDF_SP800
CKD_SHA3_512_KDF_SP800 = _LowLevel.CKD_SHA3_512_KDF_SP800
CKD_BLAKE2B_160_KDF = _LowLevel.CKD_BLAKE2B_160_KDF
CKD_BLAKE2B_256_KDF = _LowLevel.CKD_BLAKE2B_256_KDF
CKD_BLAKE2B_384_KDF = _LowLevel.CKD_BLAKE2B_384_KDF
CKD_BLAKE2B_512_KDF = _LowLevel.CKD_BLAKE2B_512_KDF
CKP_PKCS5_PBKD2_HMAC_SHA1 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA1
CKP_PKCS5_PBKD2_HMAC_GOSTR3411 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_GOSTR3411
CKP_PKCS5_PBKD2_HMAC_SHA224 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA224
CKP_PKCS5_PBKD2_HMAC_SHA256 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA256
CKP_PKCS5_PBKD2_HMAC_SHA384 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA384
CKP_PKCS5_PBKD2_HMAC_SHA512 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA512
CKP_PKCS5_PBKD2_HMAC_SHA512_224 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA512_224
CKP_PKCS5_PBKD2_HMAC_SHA512_256 = _LowLevel.CKP_PKCS5_PBKD2_HMAC_SHA512_256
CKZ_SALT_SPECIFIED = _LowLevel.CKZ_SALT_SPECIFIED
class CPKCS11Lib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LowLevel.CPKCS11Lib_swiginit(self, _LowLevel.new_CPKCS11Lib())
    __swig_destroy__ = _LowLevel.delete_CPKCS11Lib

    def Load(self, szLib):
        return _LowLevel.CPKCS11Lib_Load(self, szLib)

    def Unload(self):
        return _LowLevel.CPKCS11Lib_Unload(self)

    def C_Initialize(self):
        return _LowLevel.CPKCS11Lib_C_Initialize(self)

    def C_Finalize(self):
        return _LowLevel.CPKCS11Lib_C_Finalize(self)

    def C_GetInfo(self, pInfo):
        return _LowLevel.CPKCS11Lib_C_GetInfo(self, pInfo)

    def C_GetSlotList(self, tokenPresent, slotList):
        return _LowLevel.CPKCS11Lib_C_GetSlotList(self, tokenPresent, slotList)

    def C_GetSlotInfo(self, slotID, pInfo):
        return _LowLevel.CPKCS11Lib_C_GetSlotInfo(self, slotID, pInfo)

    def C_GetTokenInfo(self, slotID, pInfo):
        return _LowLevel.CPKCS11Lib_C_GetTokenInfo(self, slotID, pInfo)

    def C_InitToken(self, slotID, pin, pLabel):
        return _LowLevel.CPKCS11Lib_C_InitToken(self, slotID, pin, pLabel)

    def C_InitPIN(self, hSession, pin):
        return _LowLevel.CPKCS11Lib_C_InitPIN(self, hSession, pin)

    def C_SetPIN(self, hSession, OldPin, NewPin):
        return _LowLevel.CPKCS11Lib_C_SetPIN(self, hSession, OldPin, NewPin)

    def C_OpenSession(self, slotID, flags, outhSession):
        return _LowLevel.CPKCS11Lib_C_OpenSession(self, slotID, flags, outhSession)

    def C_CloseSession(self, hSession):
        return _LowLevel.CPKCS11Lib_C_CloseSession(self, hSession)

    def C_CloseAllSessions(self, slotID):
        return _LowLevel.CPKCS11Lib_C_CloseAllSessions(self, slotID)

    def C_GetSessionInfo(self, hSession, pInfo):
        return _LowLevel.CPKCS11Lib_C_GetSessionInfo(self, hSession, pInfo)

    def C_Login(self, hSession, userType, pin):
        return _LowLevel.CPKCS11Lib_C_Login(self, hSession, userType, pin)

    def C_Logout(self, hSession):
        return _LowLevel.CPKCS11Lib_C_Logout(self, hSession)

    def C_CreateObject(self, hSession, Template, outhObject):
        return _LowLevel.CPKCS11Lib_C_CreateObject(self, hSession, Template, outhObject)

    def C_DestroyObject(self, hSession, hObject):
        return _LowLevel.CPKCS11Lib_C_DestroyObject(self, hSession, hObject)

    def C_GetObjectSize(self, hSession, hObject, pulSize):
        return _LowLevel.CPKCS11Lib_C_GetObjectSize(self, hSession, hObject, pulSize)

    def C_GetAttributeValue(self, hSession, hObject, Template):
        return _LowLevel.CPKCS11Lib_C_GetAttributeValue(self, hSession, hObject, Template)

    def C_SetAttributeValue(self, hSession, hObject, Template):
        return _LowLevel.CPKCS11Lib_C_SetAttributeValue(self, hSession, hObject, Template)

    def C_FindObjectsInit(self, hSession, Template):
        return _LowLevel.CPKCS11Lib_C_FindObjectsInit(self, hSession, Template)

    def C_FindObjects(self, hSession, objectsList):
        return _LowLevel.CPKCS11Lib_C_FindObjects(self, hSession, objectsList)

    def C_FindObjectsFinal(self, hSession):
        return _LowLevel.CPKCS11Lib_C_FindObjectsFinal(self, hSession)

    def C_EncryptInit(self, hSession, pMechanism, hKey):
        return _LowLevel.CPKCS11Lib_C_EncryptInit(self, hSession, pMechanism, hKey)

    def C_Encrypt(self, hSession, inData, outEncryptedData):
        return _LowLevel.CPKCS11Lib_C_Encrypt(self, hSession, inData, outEncryptedData)

    def C_EncryptUpdate(self, hSession, inData, outEncryptedData):
        return _LowLevel.CPKCS11Lib_C_EncryptUpdate(self, hSession, inData, outEncryptedData)

    def C_EncryptFinal(self, hSession, outEncryptedData):
        return _LowLevel.CPKCS11Lib_C_EncryptFinal(self, hSession, outEncryptedData)

    def C_DecryptInit(self, hSession, pMechanism, hKey):
        return _LowLevel.CPKCS11Lib_C_DecryptInit(self, hSession, pMechanism, hKey)

    def C_Decrypt(self, hSession, inEncryptedData, outData):
        return _LowLevel.CPKCS11Lib_C_Decrypt(self, hSession, inEncryptedData, outData)

    def C_DecryptUpdate(self, hSession, inEncryptedData, outData):
        return _LowLevel.CPKCS11Lib_C_DecryptUpdate(self, hSession, inEncryptedData, outData)

    def C_DecryptFinal(self, hSession, outData):
        return _LowLevel.CPKCS11Lib_C_DecryptFinal(self, hSession, outData)

    def C_DigestInit(self, hSession, pMechanism):
        return _LowLevel.CPKCS11Lib_C_DigestInit(self, hSession, pMechanism)

    def C_Digest(self, hSession, inData, outDigest):
        return _LowLevel.CPKCS11Lib_C_Digest(self, hSession, inData, outDigest)

    def C_DigestUpdate(self, hSession, inData):
        return _LowLevel.CPKCS11Lib_C_DigestUpdate(self, hSession, inData)

    def C_DigestKey(self, hSession, hKey):
        return _LowLevel.CPKCS11Lib_C_DigestKey(self, hSession, hKey)

    def C_DigestFinal(self, hSession, outDigest):
        return _LowLevel.CPKCS11Lib_C_DigestFinal(self, hSession, outDigest)

    def C_SignInit(self, hSession, pMechanism, hKey):
        return _LowLevel.CPKCS11Lib_C_SignInit(self, hSession, pMechanism, hKey)

    def C_Sign(self, hSession, inData, outSignature):
        return _LowLevel.CPKCS11Lib_C_Sign(self, hSession, inData, outSignature)

    def C_SignUpdate(self, hSession, inData):
        return _LowLevel.CPKCS11Lib_C_SignUpdate(self, hSession, inData)

    def C_SignFinal(self, hSession, outSignature):
        return _LowLevel.CPKCS11Lib_C_SignFinal(self, hSession, outSignature)

    def C_VerifyInit(self, hSession, pMechanism, hKey):
        return _LowLevel.CPKCS11Lib_C_VerifyInit(self, hSession, pMechanism, hKey)

    def C_Verify(self, hSession, inData, inSignature):
        return _LowLevel.CPKCS11Lib_C_Verify(self, hSession, inData, inSignature)

    def C_VerifyUpdate(self, hSession, inData):
        return _LowLevel.CPKCS11Lib_C_VerifyUpdate(self, hSession, inData)

    def C_VerifyFinal(self, hSession, inSignature):
        return _LowLevel.CPKCS11Lib_C_VerifyFinal(self, hSession, inSignature)

    def C_GenerateKey(self, hSession, pMechanism, Template, outhKey):
        return _LowLevel.CPKCS11Lib_C_GenerateKey(self, hSession, pMechanism, Template, outhKey)

    def C_GenerateKeyPair(self, hSession, pMechanism, PublicKeyTemplate, PrivateKeyTemplate, outhPublicKey, outhPrivateKey):
        return _LowLevel.CPKCS11Lib_C_GenerateKeyPair(self, hSession, pMechanism, PublicKeyTemplate, PrivateKeyTemplate, outhPublicKey, outhPrivateKey)

    def C_WrapKey(self, hSession, pMechanism, hWrappingKey, hKey, WrappedKey):
        return _LowLevel.CPKCS11Lib_C_WrapKey(self, hSession, pMechanism, hWrappingKey, hKey, WrappedKey)

    def C_UnwrapKey(self, hSession, pMechanism, hUnwrappingKey, WrappedKey, Template, outhKey):
        return _LowLevel.CPKCS11Lib_C_UnwrapKey(self, hSession, pMechanism, hUnwrappingKey, WrappedKey, Template, outhKey)

    def C_DeriveKey(self, hSession, pMechanism, hBaseKey, Template, outkey):
        return _LowLevel.CPKCS11Lib_C_DeriveKey(self, hSession, pMechanism, hBaseKey, Template, outkey)

    def C_SeedRandom(self, hSession, Seed):
        return _LowLevel.CPKCS11Lib_C_SeedRandom(self, hSession, Seed)

    def C_GenerateRandom(self, hSession, RandomData):
        return _LowLevel.CPKCS11Lib_C_GenerateRandom(self, hSession, RandomData)

    def C_WaitForSlotEvent(self, flags, INOUT):
        return _LowLevel.CPKCS11Lib_C_WaitForSlotEvent(self, flags, INOUT)

    def C_GetMechanismList(self, slotID, mechanismList):
        return _LowLevel.CPKCS11Lib_C_GetMechanismList(self, slotID, mechanismList)

    def C_GetMechanismInfo(self, slotID, type, pInfo):
        return _LowLevel.CPKCS11Lib_C_GetMechanismInfo(self, slotID, type, pInfo)

# Register CPKCS11Lib in _LowLevel:
_LowLevel.CPKCS11Lib_swigregister(CPKCS11Lib)
class CK_ATTRIBUTE_SMART(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Reset(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_Reset(self)

    def ResetValue(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_ResetValue(self)

    def Reserve(self, len):
        return _LowLevel.CK_ATTRIBUTE_SMART_Reserve(self, len)

    def GetType(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetType(self)

    def SetType(self, attrType):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetType(self, attrType)

    def GetLen(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetLen(self)

    def IsString(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_IsString(self)

    def IsBool(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_IsBool(self)

    def IsNum(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_IsNum(self)

    def IsAttributeList(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_IsAttributeList(self)

    def IsBin(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_IsBin(self)

    def GetString(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetString(self)

    def SetString(self, attrType, szValue):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetString(self, attrType, szValue)

    def GetNum(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetNum(self)

    def SetNum(self, attrType, ulValue):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetNum(self, attrType, ulValue)

    def GetBool(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetBool(self)

    def SetBool(self, attrType, bValue):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetBool(self, attrType, bValue)

    def SetList(self, attrType, val):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetList(self, attrType, val)

    def GetBin(self):
        return _LowLevel.CK_ATTRIBUTE_SMART_GetBin(self)

    def SetBin(self, attrType, pBuf):
        return _LowLevel.CK_ATTRIBUTE_SMART_SetBin(self, attrType, pBuf)

    def __init__(self):
        _LowLevel.CK_ATTRIBUTE_SMART_swiginit(self, _LowLevel.new_CK_ATTRIBUTE_SMART())
    __swig_destroy__ = _LowLevel.delete_CK_ATTRIBUTE_SMART

# Register CK_ATTRIBUTE_SMART in _LowLevel:
_LowLevel.CK_ATTRIBUTE_SMART_swigregister(CK_ATTRIBUTE_SMART)

